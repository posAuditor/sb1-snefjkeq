using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using XPRESS.Common;
public partial class Sales_InvoiceAdvanced : UICulturePage
{
    XpressDataContext dc = new XpressDataContext();

    #region Properties
    private DataTable dtPaymentDetailsGroup
    {
        get
        {
            if (Session["dtPaymentDetailsGroup" + this.WinID] == null)
            {
                Session["dtPaymentDetailsGroup" + this.WinID] = dc.usp_InvoicePayment(null, 0).CopyToDataTable();
            }
            return (DataTable)Session["dtPaymentDetailsGroup" + this.WinID];
        }

        set
        {
            Session["dtPaymentDetailsGroup" + this.WinID] = value;
        }
    }
    private int IsTaxFound
    {
        get
        {
            if (ViewState["IsTaxFound"] == null) return 0;
            return (int)ViewState["IsTaxFound"];
        }

        set
        {
            ViewState["IsTaxFound"] = value;
        }
    }
    private DataTable dtQtyItemeStoreGroup
    {
        get
        {
            return (DataTable)Session["dtQtyItemeStoreGroup" + this.WinID];
        }

        set
        {
            Session["dtQtyItemeStoreGroup" + this.WinID] = value;
        }
    }
    private DataTable dtItemePrice
    {
        get
        {
            return (DataTable)Session["dtItemePrice" + this.WinID];
        }

        set
        {
            Session["dtItemePrice" + this.WinID] = value;
        }
    }
    private List<ItemsUnitDDL> dtItemsUnit
    {
        get
        {
            if (Session["dtItemsUnit" + this.WinID] == null)
            {

                Session["dtItemsUnit" + this.WinID] = ItemsUnitDDL.Mapped(dc.usp_GetItemsUnitDll().ToList());
            }
            return (List<ItemsUnitDDL>)Session["dtItemsUnit" + this.WinID];
        }

        set
        {
            Session["dtItemsUnit" + this.WinID] = value;
        }
    }
    private int Qauta_ID
    {
        get
        {
            if (ViewState["Qauta_ID"] == null) return 0;
            return (int)ViewState["Qauta_ID"];
        }

        set
        {
            ViewState["Qauta_ID"] = value;
        }
    }
    private int Item_ID
    {
        get
        {
            if (ViewState["Item_ID"] == null) return 0;
            return (int)ViewState["Item_ID"];
        }

        set
        {
            ViewState["Item_ID"] = value;
        }
    }

    private int TypeTax
    {
        get
        {
            if (Session["TypeTax_Invoice" + this.WinID] == null)
            {
                // Session["dtItems_Invoice" + this.WinID] = dc.usp_InvoiceDetails_Select(null).CopyToDataTable();
                Session["TypeTax_Invoice" + this.WinID] = dc.usp_Company_Select().FirstOrDefault().TypeTax;
            }
            return (int)Session["TypeTax_Invoice" + this.WinID];
        }

        set
        {
            Session["TypeTax_Invoice" + this.WinID] = value;
        }
    }

    protected string ImgStatus
    {
        get
        {
            string result = Page.ResolveClientUrl("~/images/");
            if (ViewState["ImgStatus"] == null) result += "new"; else result += ViewState["ImgStatus"].ToExpressString();
            result += this.MyContext.CurrentCulture == XPRESS.Common.ABCulture.Arabic ? "-ar" : string.Empty;
            return result;
        }

        set
        {
            ViewState["ImgStatus"] = value;
        }
    }

    private int Invoice_ID
    {
        get
        {
            if (ViewState["Invoice_ID"] == null) return 0;
            return (int)ViewState["Invoice_ID"];
        }

        set
        {
            ViewState["Invoice_ID"] = value;
        }
    }

    private bool EditMode
    {
        get
        {
            if (ViewState["EditMode"] == null) return false;
            return (bool)ViewState["EditMode"];
        }

        set
        {
            ViewState["EditMode"] = value;
        }
    }

    private DataTable dtItems
    {
        get
        {
            if (Session["dtItems_Invoice" + this.WinID] == null)
            {
                Session["dtItems_Invoice" + this.WinID] = dc.usp_InvoiceDetailsIncludeTax_Select(null).CopyToDataTable();
            }
            return (DataTable)Session["dtItems_Invoice" + this.WinID];
        }

        set
        {
            Session["dtItems_Invoice" + this.WinID] = value;
        }
    }

    private DataTable dtTaxes
    {
        get
        {
            if (Session["dtTaxes_Invoice" + this.WinID] == null)
            {
                Session["dtTaxes_Invoice" + this.WinID] = dc.usp_DocuemntTaxes_Select(null, null, false).CopyToDataTable();
            }
            return (DataTable)Session["dtTaxes_Invoice" + this.WinID];
        }

        set
        {
            Session["dtTaxes_Invoice" + this.WinID] = value;
        }
    }

    private int EditID
    {
        get
        {
            if (ViewState["EditID"] == null) return 0;
            return (int)ViewState["EditID"];
        }

        set
        {
            ViewState["EditID"] = value;
        }
    }

    private decimal Total
    {
        get
        {
            if (ViewState["Total"] == null) return 0;
            return (decimal)ViewState["Total"];
        }

        set
        {
            ViewState["Total"] = value;
        }
    }
    private decimal TotalServices
    {
        get
        {
            if (ViewState["TotalServices"] == null) return 0;
            return (decimal)ViewState["TotalServices"];
        }

        set
        {
            ViewState["TotalServices"] = value;
        }
    }

    private decimal TotalGift
    {
        get
        {
            if (ViewState["TotalGift"] == null) return 0;
            return (decimal)ViewState["TotalGift"];
        }

        set
        {
            ViewState["TotalGift"] = value;
        }
    }

    private decimal GrossTotal
    {
        get
        {
            if (ViewState["GrossTotal"] == null) return 0;
            return (decimal)ViewState["GrossTotal"];
        }

        set
        {
            ViewState["GrossTotal"] = value;
        }
    }

    private decimal TotalDiscount
    {
        get
        {
            if (ViewState["TotalDiscount"] == null) return 0;
            return (decimal)ViewState["TotalDiscount"];
        }

        set
        {
            ViewState["TotalDiscount"] = value;
        }
    }

    private decimal TotalTax
    {
        get
        {
            if (ViewState["TotalTax"] == null) return 0;
            return (decimal)ViewState["TotalTax"];
        }

        set
        {
            ViewState["TotalTax"] = value;
        }
    }

    private string DocRandomString
    {
        get
        {
            if (ViewState["DocRandomString"] == null)
            {
                ViewState["DocRandomString"] = DateTime.Now.Ticks.ToExpressString() + "_" + Guid.NewGuid().ToExpressString();
            }
            return (string)ViewState["DocRandomString"];
        }

        set
        {
            ViewState["DocRandomString"] = value;
        }
    }

    private int SalesOrderID
    {
        get
        {
            if (ViewState["SalesOrderID"] == null) return 0;
            return (int)ViewState["SalesOrderID"];
        }

        set
        {
            ViewState["SalesOrderID"] = value;
        }
    }

    private decimal TotalDebitTax
    {
        get
        {
            if (ViewState["TotalDebitTax"] == null) return 0;
            return (decimal)ViewState["TotalDebitTax"];
        }

        set
        {
            ViewState["TotalDebitTax"] = value;
        }
    }

    private decimal TotalCreditTax
    {
        get
        {
            if (ViewState["TotalCreditTax"] == null) return 0;
            return (decimal)ViewState["TotalCreditTax"];
        }

        set
        {
            ViewState["TotalCreditTax"] = value;
        }
    }

    private DataTable dtAllTaxes
    {
        get
        {
            if (Session["dtAllTaxes_Invoice" + this.WinID] == null)
            {
                DataTable dtallTaxes = new DataTable();
                dtallTaxes.Columns.Add("Account_ID", typeof(int));
                dtallTaxes.Columns.Add("OnInvoiceType", typeof(string));
                dtallTaxes.Columns.Add("DebitAmount", typeof(decimal));
                dtallTaxes.Columns.Add("CreditAmount", typeof(decimal));
                Session["dtAllTaxes_Invoice" + this.WinID] = dtallTaxes;
            }
            return (DataTable)Session["dtAllTaxes_Invoice" + this.WinID];
        }

        set
        {
            Session["dtAllTaxes_Invoice" + this.WinID] = value;
        }
    }

    private bool ConfirmationAnswered
    {
        get
        {
            if (ViewState["ConfirmationAnswered"] == null) return false;
            return (bool)ViewState["ConfirmationAnswered"];
        }

        set
        {
            ViewState["ConfirmationAnswered"] = value;
        }
    }

    private string ConfirmationMessage
    {
        get
        {
            if (ViewState["ConfirmationMessage"] == null)
            {
                ViewState["ConfirmationMessage"] = string.Empty;
            }
            return (string)ViewState["ConfirmationMessage"];
        }

        set
        {
            ViewState["ConfirmationMessage"] = value;
        }
    }

    private byte QuantityWarning
    {
        get
        {
            if (ViewState["QuantityWarning"] == null) return 0;
            return (byte)ViewState["QuantityWarning"];
        }

        set
        {
            ViewState["QuantityWarning"] = value;
        }
    }

    private decimal CalculatedSalesCost
    {
        get
        {
            if (ViewState["CalculatedSalesCost"] == null) return 0;
            return (decimal)ViewState["CalculatedSalesCost"];
        }

        set
        {
            ViewState["CalculatedSalesCost"] = value;
        }
    }

    public byte DocStatus_ID
    {
        get
        {
            if (ViewState["DocStatus_ID"] == null) return 1;
            return (byte)ViewState["DocStatus_ID"];
        }

        set
        {
            ViewState["DocStatus_ID"] = value;
        }
    }

    private bool IsCashInvoice
    {
        get
        {
            return Request.PathInfo == "/Cash";
        }
    }

    private bool SumFirstPaid
    {
        get
        {
            if (ViewState["SumFirstPaid"] == null)
            {
                ViewState["SumFirstPaid"] = dc.usp_Company_Select().First().SumFirstPaid;
            }
            return (bool)ViewState["SumFirstPaid"];
        }

        set
        {
            ViewState["SumFirstPaid"] = value;
        }
    }

    public bool IsViewSerialNumber
    {
        get
        {
            return MyContext.Features.IsViewSerial;
        }


    }

    private DataTable dtAllPayment
    {
        get
        {
            if (Session["dtAllPayment_Invoice" + this.WinID] == null)
            {
                Session["dtAllPayment_Invoice" + this.WinID] = dc.usp_OperationGPaymentMethode_Select(null, null).CopyToDataTable();
            }
            return (DataTable)Session["dtAllPayment_Invoice" + this.WinID];
        }

        set
        {
            Session["dtAllPayment_Invoice" + this.WinID] = value;
        }
    }

    private List<usp_Items_SelectResult> Items_Select
    {
        get
        {
            if (Session["Items_Select" + this.WinID] == null)
            {

                Session["Items_Select" + this.WinID] = dc.usp_Items_Select(string.Empty, string.Empty, null, null, null, true).ToList();
            }
            return (List<usp_Items_SelectResult>)Session["Items_Select" + this.WinID];
        }

        set
        {
            Session["Items_Select" + this.WinID] = value;
        }
    }


    #endregion

    #region Load
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {

            //this.DocRandomString.ToString();
            //this.CheckSecurity();
            //LoadControls();

            //DataRow r = null;
            //r = this.dtItems.NewRow();
            //r["ID"] = this.dtItems.GetID("ID");
            //this.dtItems.Rows.Add(r);


            //FillItemPopup();

            //gvItems.DataSource = dtItems;
            //gvItems.DataBind();
        }

        this.SetEditMode();
        if (!Page.IsPostBack)
        {
            this.DocRandomString.ToString();
            this.CheckSecurity();
            this.LoadControls();

            DataRow r = null;
            r = this.dtItems.NewRow();
            r["ID"] = this.dtItems.GetID("ID");
            this.dtItems.Rows.Add(r);


            FillItemPopup();

            gvItems.DataSource = dtItems;
            gvItems.DataBind();



            this.SetDefaults();
            this.FillInvoice();
            // this.VisibilityControl();
            // this.txtQty.Text = "1";
            IsRequiresField();

            var comp = dc.usp_Company_Select().FirstOrDefault();
            // txtCost.Enabled = !comp.IsPriceLoocked.Value;
            if (this.TypeTax==1)
            {
                gvItems.Columns[5].Visible = false;
            }


            if (Request.QueryString["DateDelivery"] != null)
            {
                var date = (Request.QueryString["DateDelivery"]).Split('-');
                txtDeliveryDate.Text = (new DateTime(date[0].ToIntOrDefault(), date[1].ToIntOrDefault(), date[2].ToIntOrDefault())).ToString("d/M/yyyy");
            }


        }
        Items_CategoriesData masterpage = (Items_CategoriesData)(Page.Master);
        ucNav.Res_ID = this.Invoice_ID;
        ucNav.SourceDocTypeType_ID = DocumentsTableTypes.Invoice.ToInt();
        ucNav.EntryType = this.IsCashInvoice ? (byte)2 : (byte)1;
        ucNav.IsPermShow = (MyContext.UserProfile.HasPermissionShow == false ? (int?)null : MyContext.UserProfile.Contact_ID);





    }
    #endregion

    #region Methode
    private void FillItemPopup(string serach = "")
    {
        gvItemAdvanced.DataSource = Items_Select.Where(c => c.Barcode.StartsWith(serach) || c.Name.StartsWith(serach)).CopyToDataTable();
        gvItemAdvanced.DataBind();
    }
    private void FilterByBranchAndCurrency()
    {
        try
        {

            if (!MyContext.UserProfile.SalesRepToCustomer.ToBooleanOrDefault())
            {
                acCustomer.ContextKey = "C," + acBranch.Value + "," + ddlCurrency.SelectedValue + ",";
            }
            else

                acCustomer.ContextKey = "C," + acBranch.Value + "," + ddlCurrency.SelectedValue + "," + MyContext.UserProfile.Area_ID.ToExpressString();


            acStore.ContextKey = string.Empty + acBranch.Value + "," + this.MyContext.UserProfile.UserId;



            if (MyContext.UserProfile.Branch_ID == null)
            {
                acCostCenter.ContextKey = this.MyContext.CurrentCulture.ToByte().ToExpressString() + ",false,";
                acCashAccount.ContextKey = this.MyContext.CurrentCulture.ToByte().ToExpressString() + ",," + ddlCurrency.SelectedValue + "," + COA.CashOnHand.ToInt().ToExpressString() + ",false,false";

            }
            else
            {
                acCostCenter.ContextKey = this.MyContext.CurrentCulture.ToByte().ToExpressString() + ",false," + acBranch.Value;
                acCashAccount.ContextKey = this.MyContext.CurrentCulture.ToByte().ToExpressString() + "," + acBranch.Value + "," + ddlCurrency.SelectedValue + "," + COA.CashOnHand.ToInt().ToExpressString() + ",false,false";

            }


        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }
    private void LoadControls()
    {
        this.dtItems = null;
        this.dtTaxes = null;
        acBranch.ContextKey = string.Empty;
        if (this.MyContext.UserProfile.Branch_ID != null)
        {
            acBranch.Value = this.MyContext.UserProfile.Branch_ID.ToExpressString();
            acBranch.Enabled = false;
        }

        if (MyContext.UserProfile.SalesRepToCustomer.ToBooleanOrDefault())
        {
            acSalesRep.ContextKey = ",," + acBranch.Value;
        }

        ddlTvae.Visible = MyContext.IsViewTaxInDocument;
        var currency = dc.usp_Currency_Select(false).ToList();
        ddlCurrency.DataSource = currency;
        ddlCurrency.DataTextField = "Name";
        ddlCurrency.DataValueField = "ID";
        ddlCurrency.DataBind();

        this.FilterByBranchAndCurrency();

        lblCreatedBy.Text = MyContext.UserProfile.EmployeeName;

        this.QuantityWarning = dc.usp_Company_Select().FirstOrDefault().QuantityWarning.Value;


        acdrivers.ContextKey = string.Empty;
        // acParentAccount.ContextKey =",";


        if (ddlCurrency.SelectedValue != null)
        {
            var getbranch = dc.usp_Branchs_Select("", null).ToList();
            if (getbranch.Count == 1)
                acBranch.Value = getbranch.First().ID.ToString();
            acBranch_SelectedIndexChanged(null, null);
        }




        var listSos = dc.SettingPointOs.Where(c => c.IsActive.Value).ToList().Select(c => new PaymentMethodeCls { Name = c.Name, ID = c.ID }).ToList();
        listSos.Add(new PaymentMethodeCls { Name = "اجـل", ID = -1 });
        listSos.Add(new PaymentMethodeCls { Name = "نقدي", ID = 0 });
        ddlPaymentMethode.DataSource = listSos.OrderBy(c => c.ID).ToList();
        ddlPaymentMethode.DataTextField = "Name";
        ddlPaymentMethode.DataValueField = "ID";
        ddlPaymentMethode.DataBind();


        //  txtFirstPaid.Visible = false;
    }
    private void CheckSecurity()
    {
        // if (!MyContext.PageData.IsViewDoc) Response.Redirect(PageLinks.Authorization, true);
        btnSave.Visible = (MyContext.PageData.IsAdd && !EditMode) || (MyContext.PageData.IsEdit && EditMode);
        btnApprove.Visible = MyContext.PageData.IsApprove;
        btnCancelApprove.Visible = !btnApprove.Visible && MyContext.PageData.IsNotApprove;
        btnCancel.Visible = MyContext.PageData.IsDelete && EditMode;
        btnApproveAccounting.Visible = MyContext.PageData.IsApproveAccounting;

        btnPrint.Visible = btnCancelApprove.Visible && MyContext.PrintAfterApprove;
        MyContext con = new MyContext(System.Web.Security.Membership.GetUser(), PageLinks.Customers, string.Empty);
        // btnFastAddNew.Visible = con.PageData.IsAdd;
        OperationsView.Visible = !btnApprove.Visible;


    }
    private void Calculate()
    {
        decimal ItemDiscount = 0;
        decimal DocDiscount = 0;
        decimal DocTax = 0;
        decimal Additionals = 0;
        decimal DocTaxValue = 0;
        this.Total = 0;
        this.GrossTotal = 0;
        this.TotalDiscount = 0;
        this.TotalTax = 0;
        this.TotalDebitTax = 0;
        this.TotalCreditTax = 0;
        this.dtAllTaxes.Rows.Clear();
        this.dtAllTaxes.AcceptChanges();
        decimal TotalItem = 0;

        TotalServices = 0;
        foreach (DataRow r in this.dtItems.Rows)
        {
            if (r.RowState == DataRowState.Deleted) continue;
            if (r["Store_ID"].ToIntOrDefault() == 0) continue;
            decimal TaxValue = r["TaxPercentageValue"].ToDecimalOrDefault();
            if (this.EditMode)
            {
                if (this.IsTaxFound == 2) TaxValue = 0;
            }
            else
            {
                if (ddlTvae.SelectedValue == "2") TaxValue = 0;
            }

            ItemDiscount = 0;

            decimal taxInclude = (TypeTax == 2 ? Decimal.Divide(TaxValue, (100 + TaxValue)) : 0);
            var uc = r["UnitCostEvaluate"].ToDecimalOrDefault();
            var taxUc = r["UnitCostEvaluate"].ToDecimalOrDefault() * taxInclude;
            r["UnitCost"] = uc - taxUc;
            r["Total"] = r["UnitCost"].ToDecimalOrDefault() * r["Quantity"].ToDecimalOrDefault();
            Total += r["UnitCost"].ToDecimalOrDefault() * r["Quantity"].ToDecimalOrDefault();
            this.TotalDiscount += ItemDiscount = (r["PercentageDiscount"].ToDecimalOrDefault() * r["Total"].ToDecimalOrDefault() * 0.01m) + r["CashDiscount"].ToDecimalOrDefault();
            var cca = r["UnitCost"].ToDecimalOrDefault() * r["Quantity"].ToDecimalOrDefault() - ItemDiscount;//this.TotalDiscount;
            TotalItem += cca;
            var pDisc = cca * txtPercentageDiscount.Text.ToDecimalOrDefault() * 0.01m;
            r["TotalCostBeforTax"] = (r["UnitCost"].ToDecimalOrDefault() * r["Quantity"].ToDecimalOrDefault()) - (r["PercentageDiscount"].ToDecimalOrDefault() * r["Total"].ToDecimalOrDefault() * 0.01m) - r["CashDiscount"].ToDecimalOrDefault(); ;
            if (r["TaxOnInvoiceType"] != DBNull.Value && r["Tax_ID"] != DBNull.Value)
            {
                r["TotalTax"] = (((cca - pDisc - txtCashDiscount.Text.ToDecimalOrDefault() / (this.dtItems.Rows.Count - ((DocStatus_ID == 1 || DocStatus_ID == 2) ? 0 : 1)))) * TaxValue * 0.01m);
                if (r["TaxOnInvoiceType"].ToExpressString() == "C")
                {
                    this.dtAllTaxes.Rows.Add(r["TaxSalesAccountID"].ToInt(), r["TaxOnInvoiceType"].ToExpressString(), 0, r["TotalTax"].ToDecimalOrDefault());
                    this.TotalCreditTax += r["TotalTax"].ToDecimalOrDefault();
                }
                else
                {
                    this.dtAllTaxes.Rows.Add(r["TaxSalesAccountID"].ToInt(), r["TaxOnInvoiceType"].ToExpressString(), r["TotalTax"].ToDecimalOrDefault(), 0);
                    this.TotalDebitTax += r["TotalTax"].ToDecimalOrDefault();
                    r["TotalTax"] = r["TotalTax"].ToDecimalOrDefault() * -1;
                }
                this.TotalTax += r["TotalTax"].ToDecimalOrDefault();
            }

            r["GrossTotal"] = (r["UnitCostEvaluate"].ToDecimalOrDefault() * r["Quantity"].ToDecimalOrDefault() - ItemDiscount + r["TotalTax"].ToDecimalOrDefault()).ToString(NbrHashNeerDecimal).ToDecimalOrDefault(); //- ItemDiscount //+ r["TotalTax"].ToDecimalOrDefault();
            decimal gTotalRow = (
                                r["UnitCostEvaluate"].ToDecimalOrDefault() * r["Quantity"].ToDecimalOrDefault()
                              - ItemDiscount
                              + r["TotalTax"].ToDecimalOrDefault()).ToString(NbrHashNeerDecimal).ToDecimalOrDefault();

            r["GrossTotalVirtual"] = gTotalRow - ((gTotalRow * txtPercentageDiscount.Text.ToDecimalOrDefault() * 0.01m) + txtCashDiscount.Text.ToDecimalOrDefault()) / dtItems.Rows.Count;



            this.GrossTotal += r["Total"].ToDecimalOrDefault(); //- pDisc - ItemDiscount + r["TotalTax"].ToDecimalOrDefault();

            int Item_IDD = Convert.ToInt32(r["Item_ID"].ToInt());


            //var ObjTypeItems = dc.Items.FirstOrDefault(x => x.ID == Item_IDD);

            //if (ObjTypeItems.Type.ToString() == "s")
            //{
            //    this.TotalServices += Convert.ToDecimal((r["UnitCost"].ToDecimalOrDefault() * r["Quantity"].ToDecimalOrDefault()).ToString(NbrHashNeerDecimal));
            //}
            //if (Convert.ToBoolean(r["IsGift"].ToBooleanOrDefault()) == true)
            //{
            //    this.TotalGift += Convert.ToDecimal((r["UnitCost"].ToDecimalOrDefault() * r["Quantity"].ToDecimalOrDefault()).ToString(NbrHashNeerDecimal));
            //}
        }

        DocDiscount = (this.GrossTotal * txtPercentageDiscount.Text.ToDecimalOrDefault() * 0.01m) + txtCashDiscount.Text.ToDecimalOrDefault();



        Additionals = txtAdditionals.Text.ToDecimalOrDefault();
        this.TotalDiscount += DocDiscount;
        this.TotalTax += DocTax;
        this.GrossTotal = this.GrossTotal - TotalDiscount + this.TotalTax + Additionals;
        //lblTotal.Text = (this.Total - DocDiscount).ToString(NbrHashNeerDecimal);
        lblTotal.Text = (this.Total).ToString(NbrHashNeerDecimal);
        lblTotalDiscount.Text = this.TotalDiscount.ToString(NbrHashNeerDecimal);
        lblAdditionals.Text = Additionals.ToString(NbrHashNeerDecimal);
        lblTotalTax.Text = this.TotalTax.ToString(NbrHashNeerDecimal);
        lblGrossTotal.Text = this.GrossTotal.ToString(NbrHashNeerDecimal);
        //if ((acCashAccount.HasValue && Page.IsPostBack && this.SumFirstPaid) || this.IsCashInvoice)
        //{
        //    // txtFirstPaid.Text = lblGrossTotal.Text;
        //    this.txtFirstPaid_TextChanged(null, null);
        //}
        this.ConfirmationAnswered = false;
        this.ConfirmationMessage = string.Empty;
        // this.ShowCustomerBalance();

    }
    private void CalulateRowTotals(int Index, int lblID)
    {
        decimal valTaxPercentage = 15;
        var txtQty = ((TextBox)gvItems.Rows[Index].FindControl("txtQty"));
        var txtCost = ((TextBox)gvItems.Rows[Index].FindControl("txtCost"));
        var txtItemCashDiscount = ((TextBox)gvItems.Rows[Index].FindControl("txtItemCashDiscount"));
        var txtItemPercentageDiscount = ((TextBox)gvItems.Rows[Index].FindControl("txtItemPercentageDiscount"));
        var txtGrossTotalItem = ((TextBox)gvItems.Rows[Index].FindControl("txtGrossTotalItem"));
        var txtGrossT = ((TextBox)gvItems.Rows[Index].FindControl("txtGrossT"));


        // var Tax = dc.usp_Taxes_Select(acItemTax.Value.ToInt(), string.Empty).FirstOrDefault();


        decimal taxInclude = TypeTax == 2 ? (Decimal.Divide(valTaxPercentage, (100M + valTaxPercentage))) : Decimal.Divide(valTaxPercentage, (100M));
        decimal unitCost = TypeTax == 2 ? (txtCost.Text.ToDecimalOrDefault() - txtCost.Text.ToDecimalOrDefault() * taxInclude) : txtCost.Text.ToDecimalOrDefault();









        //decimal taxInclude = TypeTax == 2 ? (Decimal.Divide(valTaxPercentage, (100M + valTaxPercentage))) : Decimal.Divide(valTaxPercentage, (100M));
        //decimal unitCost = TypeTax == 2 ? (txtCost.Text.ToDecimalOrDefault() - txtCost.Text.ToDecimalOrDefault() * taxInclude) : txtCost.Text.ToDecimalOrDefault();

        if (TypeTax == 1)
        {
            var res = (txtQty.Text.ToDecimalOrDefault() * txtCost.Text.ToDecimalOrDefault()).ToString(NbrHashNeerDecimal).ToDecimalOrDefault(); ;
            decimal totalDiscount = (res * txtItemPercentageDiscount.Text.ToDecimalOrDefault() * 0.01m + txtItemCashDiscount.Text.ToDecimalOrDefault()).ToDecimalOrDefault().ToString(NbrHashNeerDecimal).ToDecimalOrDefault();
            decimal totalTaxAfterDicount = ((res - totalDiscount) * valTaxPercentage / 100).ToDecimalOrDefault().ToString(NbrHashNeerDecimal).ToDecimalOrDefault(); ;
            txtGrossTotalItem.Text = (res - totalDiscount + totalTaxAfterDicount).ToString(NbrHashNeerDecimal).ToExpressString();
        }
        else if (TypeTax == 2)
        {

            var totalPrice = txtQty.Text.ToDecimalOrDefault() * unitCost;
            var calc = (totalPrice - txtItemCashDiscount.Text.ToDecimalOrDefault() - txtItemPercentageDiscount.Text.ToDecimalOrDefault() * (totalPrice) / 100);

            decimal val1 = calc * valTaxPercentage / 100;

            txtGrossTotalItem.Text = Math.Round(calc + val1, 2).ToExpressString();
            //txtCost.Text = Math.Round(unitCost,2).ToExpressString();
            txtGrossT.Text = Math.Round(unitCost, 2).ToExpressString();


            //    //var res = (txtQty.Text.ToDecimalOrDefault() * unitCost).ToString(NbrHashNeerDecimal).ToDecimalOrDefault(); ;
            //    //decimal totalDiscount = (res * txtItemPercentageDiscount.Text.ToDecimalOrDefault() * 0.01m + txtItemCashDiscount.Text.ToDecimalOrDefault()).ToDecimalOrDefault().ToString(NbrHashNeerDecimal).ToDecimalOrDefault();
            //    //decimal totalTaxAfterDicount = ((res - totalDiscount) * valTaxPercentage / 100).ToDecimalOrDefault().ToString(NbrHashNeerDecimal).ToDecimalOrDefault(); ;
            //    //txtCost.Text = (res).ToDecimalOrDefault().ToString(NbrHashNeerDecimal).ToExpressString();
            //    //if (lblID != 0)
            //    //{
            //    //    DataRow r = this.dtItems.Select("ID=" + lblID)[0];
            //    //    r["UnitCost"] = (res).ToDecimalOrDefault().ToString(NbrHashNeerDecimal).ToExpressString();
            //    //    txtGrossTotalItem.Text = (res - totalDiscount + totalTaxAfterDicount).ToString(NbrHashNeerDecimal).ToExpressString();
            //    //}

        }
    }
    private bool Save(bool IsApproving, System.Data.Common.DbTransaction trans)
    {




        if (dtItems.AsEnumerable().Where(r => r.RowState != DataRowState.Deleted).Count() == 0)
        {
            UserMessages.Message(null, Resources.UserInfoMessages.OneItemRequired, string.Empty);
            trans.Rollback();
            return false;
        }
        if (this.Total <= 0 || this.GrossTotal < 0)
        {
            UserMessages.Message(null, Resources.UserInfoMessages.TotalIsNotValid, string.Empty);
            trans.Rollback();
            return false;
        }

        if (txtOperationDate.Text.ToDate() > DateTime.Now.Date)
        {
            UserMessages.Message(null, Resources.UserInfoMessages.DateBiggerThanToday, string.Empty);
            trans.Rollback();
            return false;
        }

        if (this.dtItems.AsEnumerable().Where(x => x.Field<int?>("ID") > 1 && x.RowState != DataRowState.Deleted && x.Field<int?>("Store_ID") == null && x.Field<int?>("val1") != null).Any())
        {
            UserMessages.Message(null, Resources.UserInfoMessages.StoresRequired, string.Empty);
            trans.Rollback();
            return false;
        }

        //if (txtFirstPaid.Text.ToDecimalOrDefault() > Math.Round(this.GrossTotal, 4))
        //{
        //    UserMessages.Message(null, Resources.UserInfoMessages.FirstPaidGreaterThanTotal, string.Empty);
        //    trans.Rollback();
        //    return false;
        //}

        this.CalculatedSalesCost = 0;
        this.ConfirmationMessage = string.Empty;
        if (IsApproving && !this.CheckCreditLmit())
        {
            trans.Rollback();
            return false;
        }

        string Serial = string.Empty;
        byte DocStatus_ID = IsApproving ? DocStatus.Approved.ToByte() : DocStatus.Current.ToByte();
        DateTime? ApproveDate = IsApproving ? DateTime.Now : (DateTime?)null;
        int? approvedBY_ID = IsApproving ? MyContext.UserProfile.Contact_ID : (int?)null;
        byte EntryType = this.IsCashInvoice ? (byte)2 : (byte)1;
        int Serial_ID = DocSerials.Invoice.ToInt();
        int? SalesOrderID = this.SalesOrderID == 0 ? (int?)null : this.SalesOrderID;
        int Detail_ID = 0;
        var cmp = dc.usp_Company_Select().FirstOrDefault();

        decimal firstpaid = 0;

        if (ddlPaymentMethode.SelectedValue != "-1")
        {
            var paymentMethods = dc.SettingPointOs.Where(c => c.IsActive.Value).ToList();
            var IDPM = ddlPaymentMethode.SelectedValue.ToIntOrDefault();
            var ChoosedPayMethodes_ID = paymentMethods.Where(c => c.ID == IDPM).FirstOrDefault();
            if (ChoosedPayMethodes_ID != null)
            {
                // var isCash = ChoosedPayMethodes_ID.IsCash.ToBooleanOrDefault();
                // if (isCash)
                // {
                firstpaid = lblGrossTotal.Text.ToDecimalOrDefault();
                // }
            }
        }

        if (!this.EditMode)
        {



            this.Invoice_ID = dc.usp_InvoiceDateDelivery_Insert(acBranch.Value.ToNullableInt(), ddlCurrency.SelectedValue.ToInt(), txtRatio.Text.ToDecimalOrDefault(), txtOperationDate.Text.ToDate(),
                                             acCustomer.Value.ToInt(), ref Serial, Serial_ID, DocStatus_ID, DateTime.Now, MyContext.UserProfile.Contact_ID, ApproveDate,
                                             approvedBY_ID, null, null, acAddress.Value.ToNullableInt(), acShipAddress.Value.ToNullableInt(), acPaymentAddress.Value.ToNullableInt(),
                                             acTelephone.Value.ToNullableInt(), acCostCenter.Value.ToNullableInt(), txtNotes.Text, lblTotal.Text.ToDecimalOrDefault(), txtPercentageDiscount.Text.ToDecimalOrDefault(),
                                             txtCashDiscount.Text.ToDecimalOrDefault(), txtAdditionals.Text.ToDecimalOrDefault(), lblTotalDiscount.Text.ToDecimalOrDefault(), lblTotalTax.Text.ToDecimalOrDefault(),
                                             lblGrossTotal.Text.ToDecimalOrDefault(), firstpaid, null, txtUserRefNo.Text, this.DocRandomString, EntryType, SalesOrderID, acSalesRep.Value.ToNullableInt(), acCashAccount.Value.ToNullableInt(), acCustomerMesure.Value.ToNullableInt(), txtDeliveryDate.Text.ToDate(), acdrivers.Value.ToNullableInt(),
                                              ddlTvae.SelectedValue.ToNullableInt(), 0, txtCustomerName.Text, txtCustomerMobile.Text, txtProjectRef.Text, txtContactPerson.Text,"", txtCustomerRepresentative.Text,null);

            if (this.SalesOrderID != 0)
            {
                dc.usp_SalesOrderafterInvoice_Insert(this.SalesOrderID);
            }
            if (Qauta_ID > 0)
            {
                dc.usp_QuatoAfterInvoice_Insert(this.Qauta_ID, this.Invoice_ID);
            }
            if (this.Invoice_ID > 0)
            {



                foreach (DataRow r in this.dtItems.Rows)
                {
                    if (r["ID"].ToInt() == 1)
                    {
                        continue;
                    }
                    if (r.RowState == DataRowState.Deleted) continue;
                    Detail_ID = dc.usp_InvoiceDetailsIncludeTax_Insert(this.Invoice_ID, r["Store_ID"].ToInt(), r["Item_ID"].ToInt(), r["UnitCost"].ToDecimalOrDefault(), r["Quantity"].ToDecimalOrDefault(), r["Uom_iD"].ToInt(), r["Batch_ID"].ToNullableInt(), r["Tax_ID"].ToNullableInt(), r["PercentageDiscount"].ToDecimalOrDefault(), r["CashDiscount"].ToDecimalOrDefault(), r["TotalTax"].ToDecimalOrDefault(), r["Notes"].ToExpressString(), r["QtyInNumber"].ToDecimalOrDefault(), r["Capacity"].ToString(), r["ItemDescription"].ToString(), r["IDCodeOperation"].ToString(), r["Policy"].ToString(), r["InvoiceDate"].ToDate(), r["Capacities"].ToString(), r["IsGift"].ToBooleanOrDefault(), r["UnitCostEvaluate"].ToDecimalOrDefault());

                    if (IsApproving)
                        if (cmp.ConsumptionRawMaterials.Value)
                        {
                            if (!this.InsertICJ(Detail_ID, r))
                            {
                                trans.Rollback();
                                return false;
                            }

                        }
                        else
                        {
                            if (!this.InsertICJNotCosumMaterial(Detail_ID, r))
                            {
                                trans.Rollback();
                                return false;
                            }
                        }

                    if (MyContext.Features.IsViewSerial)
                    {
                        var serailNumberConcate = r["SerialNumber"].ToExpressString().Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
                        foreach (var sn in serailNumberConcate)
                        {
                            if (!string.IsNullOrEmpty(sn))
                            {
                                var res = dc.OperationSerialNumber_Bay(r["Item_ID"].ToInt(), DocumentsTableTypes.Receipt.ToInt(), this.Invoice_ID, sn.Trim());
                                if (res == -1)
                                {
                                    UserMessages.Message(null, "هذا السريل مباع " + sn + "", string.Empty);
                                    trans.Rollback();
                                    return false;
                                }
                                if (res == -2)
                                {
                                    UserMessages.Message(null, "هذا السريل  عليك إدخالة للنظام " + sn + "", string.Empty);
                                    trans.Rollback();
                                    return false;
                                }
                            }
                        }
                    }
                }


                //foreach (DataRow item in this.dtAllPayment.Rows)
                //{
                //    if (item.RowState == DataRowState.Deleted) continue;
                //    if (item.RowState == DataRowState.Added)
                //    {
                //        dc.usp_OperationGPaymentMethode_CRUD(0, this.Invoice_ID, DocumentsTableTypes.Invoice.ToInt(), item["GPaymentMethode_ID"].ToIntOrDefault(), item["Price"].ToDecimalOrDefault(), DateTime.Now.ToDate());
                //    }
                //    if (item.RowState == DataRowState.Modified)
                //    {
                //        dc.usp_OperationGPaymentMethode_CRUD(item["ID"].ToInt(), this.Invoice_ID, DocumentsTableTypes.Invoice.ToInt(), item["GPaymentMethode_ID"].ToIntOrDefault(), item["Price"].ToDecimalOrDefault(), DateTime.Now.ToDate());
                //    }
                //    //if (item.RowState == DataRowState.Deleted)
                //    //{
                //    //    dc.usp_OperationGPaymentMethode_Delete(item["ID", DataRowVersion.Original].ToInt());
                //    //}
                //}

                foreach (DataRow r in this.dtTaxes.Rows)
                {
                    if (r.RowState == DataRowState.Deleted) continue;
                    dc.usp_DocuemntTaxes_Insert(DocumentsTableTypes.Invoice.ToInt(), this.Invoice_ID, r["Tax_ID"].ToInt());
                }
                if (IsApproving)
                    if (!this.InsertOperation())
                    {
                        trans.Rollback();
                        return false;
                    }
                LogAction(IsApproving ? Actions.Approve : Actions.Add, Serial, dc);
            }
        }
        else
        {
            int Result = dc.usp_InvoiceDelivery_Update(this.Invoice_ID, acBranch.Value.ToNullableInt(), ddlCurrency.SelectedValue.ToInt(), txtRatio.Text.ToDecimalOrDefault(), txtOperationDate.Text.ToDate(),
                                                    acCustomer.Value.ToInt(), ref Serial, Serial_ID, DocStatus_ID, DateTime.Now, MyContext.UserProfile.Contact_ID, ApproveDate, approvedBY_ID,
                                                    null, null, acAddress.Value.ToNullableInt(), acShipAddress.Value.ToNullableInt(), acPaymentAddress.Value.ToNullableInt(), acTelephone.Value.ToNullableInt(),
                                                    acCostCenter.Value.ToNullableInt(), txtNotes.Text, lblTotal.Text.ToDecimalOrDefault(), txtPercentageDiscount.Text.ToDecimalOrDefault(), txtCashDiscount.Text.ToDecimalOrDefault(), txtAdditionals.Text.ToDecimalOrDefault(),
                                                    lblTotalDiscount.Text.ToDecimalOrDefault(), lblTotalTax.Text.ToDecimalOrDefault(), lblGrossTotal.Text.ToDecimalOrDefault(), firstpaid, txtUserRefNo.Text, this.DocRandomString, acSalesRep.Value.ToNullableInt(), acCashAccount.Value.ToNullableInt(), txtDeliveryDate.Text.ToDate(), acdrivers.Value.ToNullableInt(),
                                                    ddlTvae.SelectedValue.ToNullableInt(), 0, txtCustomerName.Text, txtCustomerMobile.Text, txtProjectRef.Text, txtContactPerson.Text, txtCustomerRepresentative.Text);

            if (this.SalesOrderID != 0)
            {
                dc.usp_SalesOrderafterInvoice_Insert(this.SalesOrderID);
            }
            if (Result > 0)
            {



                foreach (DataRow r in this.dtItems.Rows)
                {
                    if (r["val1"].ToIntOrDefault() == 0)
                    {
                        continue;
                    }



                    if (r.RowState == DataRowState.Added)
                    {
                        Detail_ID = dc.usp_InvoiceDetailsIncludeTax_Insert(this.Invoice_ID, r["Store_ID"].ToInt(), r["Item_ID"].ToInt(), r["UnitCost"].ToDecimalOrDefault(), r["Quantity"].ToDecimalOrDefault(), r["Uom_iD"].ToInt(), r["Batch_ID"].ToNullableInt(), r["Tax_ID"].ToNullableInt(), r["PercentageDiscount"].ToDecimalOrDefault(), r["CashDiscount"].ToDecimalOrDefault(), r["TotalTax"].ToDecimalOrDefault(), r["Notes"].ToExpressString(), r["QtyInNumber"].ToDecimalOrDefault(), r["Capacity"].ToString(), r["ItemDescription"].ToString(), r["IDCodeOperation"].ToString(), r["Policy"].ToString(), r["InvoiceDate"].ToDate(), r["Capacities"].ToString(), r["IsGift"].ToBooleanOrDefault(), r["UnitCostEvaluate"].ToDecimalOrDefault());
                    }
                    if (r.RowState == DataRowState.Modified)
                    {
                        Detail_ID = r["ID"].ToInt();
                        dc.usp_InvoiceDetailsIncludeTax_Update(r["ID"].ToInt(), r["Store_ID"].ToInt(), r["Item_ID"].ToInt(), r["UnitCost"].ToDecimalOrDefault(), r["Quantity"].ToDecimalOrDefault(), r["Uom_iD"].ToInt(), r["Batch_ID"].ToNullableInt(), r["Tax_ID"].ToNullableInt(), r["PercentageDiscount"].ToDecimalOrDefault(), r["CashDiscount"].ToDecimalOrDefault(), r["TotalTax"].ToDecimalOrDefault(), r["Notes"].ToExpressString(), r["QtyInNumber"].ToDecimalOrDefault(), r["IsGift"].ToBooleanOrDefault(), r["UnitCostEvaluate"].ToDecimalOrDefault());
                    }
                    if (r.RowState == DataRowState.Deleted)
                    {
                        dc.usp_InvoiceDetails_Delete(r["ID", DataRowVersion.Original].ToInt());
                    }
                    if (IsApproving && r.RowState != DataRowState.Deleted)
                    {
                        Detail_ID = r.RowState == DataRowState.Added ? Detail_ID : r["ID"].ToInt();

                        if (cmp.ConsumptionRawMaterials.Value)
                        {
                            if (!this.InsertICJ(Detail_ID, r)) { trans.Rollback(); return false; }
                        }
                        else
                        {
                            if (!this.InsertICJNotCosumMaterial(Detail_ID, r)) { trans.Rollback(); return false; }
                        }
                    }

                    if (MyContext.Features.IsViewSerial)
                    {
                        var serailNumberConcate = r["SerialNumber"].ToExpressString().Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
                        foreach (var sn in serailNumberConcate)
                        {
                            var res = dc.OperationSerialNumber_Bay(r["Item_ID"].ToInt(), DocumentsTableTypes.Receipt.ToInt(), this.Invoice_ID, sn.Trim());
                            if (res == -1)
                            {
                                UserMessages.Message(null, "هذا السريل مباع " + sn + "", string.Empty);
                                trans.Rollback();
                                return false;
                            }
                            if (res == -2)
                            {
                                UserMessages.Message(null, "هذا السريل  عليك إدخالة للنظام " + sn + "", string.Empty);
                                trans.Rollback();
                                return false;
                            }
                        }
                    }
                }
                //foreach (DataRow item in this.dtAllPayment.Rows)
                //{
                //    if (item.RowState == DataRowState.Deleted) continue;
                //    //if (item.RowState == DataRowState.Added)
                //    //{
                //    //    dc.usp_OperationGPaymentMethode_CRUD(0, this.Invoice_ID, DocumentsTableTypes.Invoice.ToInt(), item[""].ToIntOrDefault(), item["Price"].ToDecimalOrDefault(), DateTime.Now.ToDate());
                //    //}
                //    //if (item.RowState == DataRowState.Modified)
                //    //{
                //    dc.usp_OperationGPaymentMethode_CRUD(item["ID"].ToInt(), this.Invoice_ID, DocumentsTableTypes.Invoice.ToInt(), item["GPaymentMethode_ID"].ToIntOrDefault(), item["Price"].ToDecimalOrDefault(), DateTime.Now.ToDate());
                //    //}
                //    //if (item.RowState == DataRowState.Deleted)
                //    //{
                //    //    dc.usp_OperationGPaymentMethode_Delete(item["ID", DataRowVersion.Original].ToInt());
                //    //}
                //}

                foreach (DataRow r in this.dtTaxes.Rows)
                {
                    if (r.RowState == DataRowState.Added)
                    {
                        dc.usp_DocuemntTaxes_Insert(DocumentsTableTypes.Invoice.ToInt(), this.Invoice_ID, r["Tax_ID"].ToInt());
                    }
                    if (r.RowState == DataRowState.Deleted)
                    {
                        dc.usp_DocuemntTaxes_Delete(r["ID", DataRowVersion.Original].ToInt());
                    }
                }
                if (IsApproving)
                    if (!this.InsertOperation())
                    {

                        trans.Rollback();
                        return false;
                    }
                LogAction(IsApproving ? Actions.Approve : Actions.Edit, txtSerial.Text, dc);
            }
        }
        if (this.ConfirmationMessage != string.Empty)
        {
            ltConfirmationMessage.Text = this.ConfirmationMessage;
            mpeConfirm.Show();
            trans.Rollback();
            return false;
        }


        var invs = dc.Invoices.Where(c => c.ID == this.Invoice_ID).ToList();
        if (invs.Any())
        {
            var inv = invs.FirstOrDefault();

            inv.typePayment_ID = ddlPaymentMethode.SelectedValue.ToIntOrDefault();
            dc.SubmitChanges();
        }


        Serial = Serial == string.Empty ? string.Empty : " (" + Serial + ") ";
        UserMessages.MessageWithPtint(null, Resources.UserInfoMessages.OperationSuccess + Serial, PageLinks.InvoiceShortcut + Request.PathInfo + "?ID=" + this.Invoice_ID.ToExpressString(), PageLinks.InvoicesList, PageLinks.InvoiceShortcut + Request.PathInfo, "~/Report_Dev/PrintInnoiceeDev.aspx?Invoice_ID=" + this.Invoice_ID + "&IsMaterla=1");
        return true;
    }
    private bool CheckCreditLmit()
    {

        if (this.ConfirmationAnswered) return true;
        var result = dc.fun_CheckCustomerCreditLimit(acCustomer.Value.ToInt(), this.GrossTotal - lblGrossTotal.Text.ToDecimalOrDefault()).Value;
        if (result == -9)
        {
            UserMessages.Message(null, Resources.UserInfoMessages.CustomerCreditLimitExceeded, string.Empty);
            return false;
        }
        if (result == -8)
        {
            this.ConfirmationMessage = "<br>" + Resources.UserInfoMessages.CustomerCreditLimitWillExceed + "<br>";
        }
        return true;
    }
    private bool InsertOperation()
    {
        decimal ratio = txtRatio.Text.ToDecimalOrDefault();
        decimal Additionals = txtAdditionals.Text.ToDecimalOrDefault();
        string serial = string.Empty;
        var company = dc.usp_Company_Select().FirstOrDefault();
        int ContactAccountID = dc.fun_getContactAccountID(acCustomer.Value.ToInt()).Value;

        int Result = dc.usp_Operation_Insert(acBranch.Value.ToNullableInt(), txtOperationDate.Text.ToDate(), ref serial, DocStatus.Approved.ToByte(), OperationTypes.Sales.ToInt(), ddlCurrency.SelectedValue.ToInt(), (this.Total + this.TotalCreditTax + Additionals) * ratio, (this.Total + this.TotalCreditTax + Additionals), ratio, txtNotes.Text);

        //ايراد المبيعات
        dc.usp_OperationDetails_Insert(Result, company.SellAccount_ID, 0, this.Total * ratio, 0, this.Total, null, this.Invoice_ID, DocumentsTableTypes.Invoice.ToInt());

        //ايراد الاضافات
        if (Additionals > 0) dc.usp_OperationDetails_Insert(Result, company.InvoiceAdditionals_AccountID, 0, Additionals * ratio, 0, Additionals, null, this.Invoice_ID, DocumentsTableTypes.Invoice.ToInt());

        //Customer
        if (ddlPaymentMethode.SelectedValue != "-1")
        {
            var Accou_ID = 0;
            var paymentMethods = dc.SettingPointOs.Where(c => c.IsActive.Value).ToList();
            var IDPM = ddlPaymentMethode.SelectedValue.ToIntOrDefault();
            var ChoosedPayMethodes_ID = paymentMethods.Where(c => c.ID == IDPM).FirstOrDefault();

            if (ChoosedPayMethodes_ID != null)
            {
                if (acCashAccount.HasValue && ddlPaymentMethode.SelectedValue == "0")
                {
                    Accou_ID = acCashAccount.Value.ToInt();
                }
                else
                {
                    Accou_ID = ChoosedPayMethodes_ID.SalesAccountID.ToIntOrDefault();
                }
            }
            else
            {
                if (acCashAccount.HasValue && ddlPaymentMethode.SelectedValue == "0")
                {
                    Accou_ID = acCashAccount.Value.ToInt();
                }
            }

            if (Accou_ID == 0)
            {

                UserMessages.Message(null, "حساب الصندوق غير معرف", string.Empty);
                return false;



            }
            if (Accou_ID != 0)
            {
                dc.usp_OperationDetails_Insert(Result, Accou_ID, (this.GrossTotal) * ratio, 0, (this.GrossTotal), 0, null, this.Invoice_ID, DocumentsTableTypes.Invoice.ToInt());
            }
            else
            {
                dc.usp_OperationDetails_Insert(Result, ContactAccountID, (this.GrossTotal) * ratio, 0, (this.GrossTotal), 0, null, this.Invoice_ID, DocumentsTableTypes.Invoice.ToInt());
            }
        }
        else
        {
            dc.usp_OperationDetails_Insert(Result, ContactAccountID, (this.GrossTotal) * ratio, 0, (this.GrossTotal), 0, null, this.Invoice_ID, DocumentsTableTypes.Invoice.ToInt());
        }


        //Discount
        if (this.TotalDiscount > 0)
        {
            dc.usp_OperationDetails_Insert(Result, company.SalesDiscountAccountID, this.TotalDiscount * ratio, 0, this.TotalDiscount, 0, null, this.Invoice_ID, DocumentsTableTypes.Invoice.ToInt());
        }

        //Taxes
        var GroupedTaxes = from tax in this.dtAllTaxes.AsEnumerable()
                           where tax.RowState != DataRowState.Deleted
                           group tax by new { Account_ID = tax.Field<int>("Account_ID"), OnInvoiceType = tax.Field<string>("OnInvoiceType") } into groupedTaxes
                           select new { Key = groupedTaxes.Key, DebitAmount = groupedTaxes.Sum(x => x.Field<decimal>("DebitAmount")), CreditAmount = groupedTaxes.Sum(x => x.Field<decimal>("CreditAmount")) };
        foreach (var tax in GroupedTaxes)
        {
            dc.usp_OperationDetails_Insert(Result, tax.Key.Account_ID, tax.DebitAmount * ratio, tax.CreditAmount * ratio, tax.DebitAmount, tax.CreditAmount, null, this.Invoice_ID, DocumentsTableTypes.Invoice.ToInt());
        }

        if (this.CalculatedSalesCost > 0)
        {
            dc.usp_SalesCostOperation_Insert(acBranch.Value.ToNullableInt(), txtOperationDate.Text.ToDate(), this.CalculatedSalesCost, this.Invoice_ID, DocumentsTableTypes.Invoice.ToInt());
        }

        //CostCenter Debit
        dc.usp_CostCenterOperation_Insert(acBranch.Value.ToNullableInt(), acCostCenter.Value.ToNullableInt(), txtOperationDate.Text.ToDate(), this.CalculatedSalesCost + (this.TotalDiscount * ratio), this.Invoice_ID, DocumentsTableTypes.Invoice.ToInt(), txtNotes.Text);
        //CostCenter Credit
        dc.usp_CostCenterOperation_Insert(acBranch.Value.ToNullableInt(), acCostCenter.Value.ToNullableInt(), txtOperationDate.Text.ToDate(), (this.Total + Additionals) * ratio * -1, this.Invoice_ID, DocumentsTableTypes.Invoice.ToInt(), txtNotes.Text);




        //foreach (DataRow item in this.dtAllPayment.Rows)
        //{
        //    if (item.RowState == DataRowState.Deleted) continue;
        //    if (item["Price"].ToDecimalOrDefault() > 0)
        //    {
        //        var AccountPayMethode_ID = dc.usp_GenerateMethodePayment_Select(item["GPaymentMethode_ID"].ToIntOrDefault(), string.Empty).FirstOrDefault();
        //        this.InsertCashIn(item["Price"].ToDecimalOrDefault(), AccountPayMethode_ID.Account_ID.Value);
        //    }
        //}



        //if (ddlPaymentMethode.SelectedIndex != 0)
        //{
        //    var paymentMethods = dc.SettingPointOs.Where(c => c.IsActive.Value).ToList();
        //    var IDPM = ddlPaymentMethode.SelectedValue.ToIntOrDefault();
        //    var ChoosedPayMethodes_ID = paymentMethods.Where(c => c.ID == IDPM).FirstOrDefault();
        //    if (ChoosedPayMethodes_ID != null)
        //    {
        //        if (ChoosedPayMethodes_ID.IsCash.ToBooleanOrDefault())
        //        {
        //            this.InsertCashIn(ChoosedPayMethodes_ID.SalesAccountID.ToIntOrDefault());
        //        }
        //        else
        //        {
        //            this.InsertBankIn(ChoosedPayMethodes_ID.SalesAccountID.ToIntOrDefault());
        //        }
        //    }
        //}

        return true;
    }
    private void InsertCashIn(Decimal PaidAmount, int AccountPayMethode_ID)
    {
        string Serial = string.Empty;
        decimal ratio = txtRatio.Text.ToDecimalOrDefault();
        int? CashIn_ID = null;
        if (PaidAmount <= 0) return;
        int ContactChartOfAccount_ID = dc.fun_getContactAccountID(acCustomer.Value.ToInt()).Value;
        CashIn_ID = dc.usp_Payments_Insert(txtOperationDate.Text.ToDate(), DateTime.Now, MyContext.UserProfile.Contact_ID, MyContext.UserProfile.Contact_ID, DateTime.Now, txtUserRefNo.TrimmedText, ref Serial, DocSerials.CashIn.ToInt(), txtNotes.Text, PaidAmount, null, DocStatus.Approved.ToByte(), PaymentsTypes.CashInCustomer.ToByte(), acBranch.Value.ToNullableInt(), txtRatio.Text.ToDecimalOrDefault(), ddlCurrency.SelectedValue.ToInt(), this.Invoice_ID, DocumentsTableTypes.Invoice.ToInt(), this.DocRandomString + "_FromInvoice");
        if (!CashIn_ID.HasValue || CashIn_ID.Value <= 0) throw new Exception("Error Occured During inserting the cash document");
        dc.usp_PaymentsDetails_Insert(CashIn_ID, AccountPayMethode_ID, ContactChartOfAccount_ID, PaidAmount, null, string.Empty, null);

        int Operation_ID = dc.usp_Operation_Insert(acBranch.Value.ToNullableInt(), txtOperationDate.Text.ToDate(), ref Serial, DocStatus.Approved.ToByte(), OperationTypes.CashIn.ToInt(), ddlCurrency.SelectedValue.ToInt(), PaidAmount * ratio, PaidAmount, ratio, null);
        dc.usp_OperationDetails_Insert(Operation_ID, ContactChartOfAccount_ID, 0, PaidAmount * ratio, 0, PaidAmount, null, CashIn_ID, DocumentsTableTypes.Payment_CashIn.ToInt());
        dc.usp_OperationDetails_Insert(Operation_ID, AccountPayMethode_ID, PaidAmount * ratio, 0, PaidAmount, 0, null, CashIn_ID, DocumentsTableTypes.Payment_CashIn.ToInt());
        dc.usp_SetCashDocForBills(this.Invoice_ID, CashIn_ID, DocumentsTableTypes.Invoice.ToInt());
    }

    #region ICJ
    private bool InsertICJ(int Detail_ID, DataRow row)
    {
        decimal? SalesCost = 0;



        var lstMaterials = dc.usp_ProductionOrderDetailsForFinalItem_Select(row["Item_ID"].ToInt(), row["Store_ID"].ToInt(), row["Quantity"].ToDecimalOrDefault()).ToList();//.CopyToDataTable();
        foreach (var item in lstMaterials)
        {
            var res = InsertOutICJ(Detail_ID, this.Invoice_ID, item, txtOperationDate.Text.ToDate().Value, acBranch.Value.ToIntOrDefault());
            if (!res.Item1)
            {
                UserMessages.Message(null, res.Item2, string.Empty);
                this.ConfirmationMessage = string.Empty;
                return false;


            }
        }

        decimal? Cost = 0;



        var QtyWorningFlag = dc.usp_Company_Select().FirstOrDefault().QuantityWarning;
        if (QtyWorningFlag == ICJStoredProcFlags.QtyReserved.ToInt())
        {
            var funItemQty = dc.fun_ItemQty(row["Item_ID"].ToInt(), row["Store_ID"].ToInt(), null, row["Uom_ID"].ToInt(), this.SalesOrderID);
            if (funItemQty < row["Quantity"].ToDecimalOrDefault())
            {
                UserMessages.Message(null, Resources.UserInfoMessages.QtyReserved + " (" + row["StoreName"] + " : " + row["ItemName"] + " : " + row["BatchName"] + ")", string.Empty);
                this.ConfirmationMessage = string.Empty;
                return false;
            }


        }

        if (!lstMaterials.Any())
        {





            int result = dc.usp_ICJ_Invoice(txtOperationDate.Text.ToDate(), row["Quantity"].ToDecimalOrDefault(), row["Item_ID"].ToInt(), row["Uom_ID"].ToInt(), row["Total"].ToDecimalOrDefault() * txtRatio.Text.ToDecimalOrDefault(), row["Batch_ID"].ToNullableInt(), row["Store_ID"].ToInt(), acBranch.Value.ToNullableInt(), DocumentsTableTypes.Invoice.ToInt(), this.Invoice_ID, Detail_ID, this.SalesOrderID, ref SalesCost);
            this.CalculatedSalesCost += SalesCost.Value;

            if ((result & ICJStoredProcFlags.QtyReserved.ToInt()) == ICJStoredProcFlags.QtyReserved.ToInt())
            {
                UserMessages.Message(null, Resources.UserInfoMessages.QtyReserved + " (" + row["StoreName"] + " : " + row["ItemName"] + " : " + row["BatchName"] + ")", string.Empty);
                this.ConfirmationMessage = string.Empty;
                return false;
            }

            if ((result & ICJStoredProcFlags.QtyNotEnoughAndStop.ToInt()) == ICJStoredProcFlags.QtyNotEnoughAndStop.ToInt())
            {
                UserMessages.Message(null, Resources.UserInfoMessages.QtyNotEnough + " (" + row["StoreName"] + " : " + row["ItemName"] + " : " + row["BatchName"] + ")", string.Empty);
                this.ConfirmationMessage = string.Empty;
                return false;
            }
            if ((result & ICJStoredProcFlags.BatchOrderWarning.ToInt()) == ICJStoredProcFlags.BatchOrderWarning.ToInt())
            {
                UserMessages.Message(null, Resources.UserInfoMessages.BatchOrderWarning + " (" + row["StoreName"] + " : " + row["ItemName"] + " : " + row["BatchName"] + ")", string.Empty);
                this.ConfirmationMessage = string.Empty;
                return false;
            }

            if ((result & ICJStoredProcFlags.BatchQtyNotEnough.ToInt()) == ICJStoredProcFlags.BatchQtyNotEnough.ToInt())
            {
                UserMessages.Message(null, Resources.UserInfoMessages.BatchQtyNotEnough + " (" + row["StoreName"] + " : " + row["ItemName"] + " : " + row["BatchName"] + ")", string.Empty);
                this.ConfirmationMessage = string.Empty;
                return false;
            }

            if ((result & ICJStoredProcFlags.QtyNotEnoughAndAsk.ToInt()) == ICJStoredProcFlags.QtyNotEnoughAndAsk.ToInt() && !this.ConfirmationAnswered)
            {
                this.ConfirmationMessage += "<br>\u2022 " + Resources.UserInfoMessages.QtyNotEnough + " (" + row["StoreName"] + " : " + row["ItemName"] + " : " + row["BatchName"] + ")";
            }
            if ((result & ICJStoredProcFlags.PriceLessThanCost.ToInt()) == ICJStoredProcFlags.PriceLessThanCost.ToInt() && !this.ConfirmationAnswered)
            {
                this.ConfirmationMessage += "<br><span style='color:red'> \u2022 " + Resources.UserInfoMessages.PriceLessThanCost + " (" + row["StoreName"] + " : " + row["ItemName"] + " : " + row["BatchName"] + ")</span>";
            }
        }
        else
        {

        }
        return true;
    }

    private Tuple<bool, string> InsertOutICJ(int Detail_ID, int id, usp_ProductionOrderDetailsForFinalItem_SelectResult row, DateTime txtOperationDate, int acBranch)
    {
        decimal? Cost = 0;
        int result = 0;

        result = dc.usp_ICJ_ProductionOrder_Out(txtOperationDate.ToDate(), row.Quantity.ToDecimalOrDefault(), row.Item_ID.ToInt(), null, 0, null, row.Store_ID.ToInt(), acBranch.ToNullableInt(), DocumentsTableTypes.Invoice.ToInt(), id, Detail_ID, ref Cost);
        this.CalculatedSalesCost += Cost.Value;

        if (result == -32)
        {
            //UserMessages.Message(null, Resources.UserInfoMessages.QtyReserved + " (" + row["StoreName"] + " : " + row["ItemName"].ToExpressString() + ")", string.Empty);
            return new Tuple<bool, string>(false, Resources.UserInfoMessages.QtyReserved + " (" + row.StoreName + " : " + row.ItemName.ToExpressString() + ")");
        }
        if (result == -4)
        {
            // UserMessages.Message(null, Resources.UserInfoMessages.QtyNotEnough + " (" + row["StoreName"] + " : " + row["ItemName"] + ")", string.Empty);
            // return false;
            return new Tuple<bool, string>(false, Resources.UserInfoMessages.QtyNotEnough + " (" + row.StoreName + " : " + row.ItemName.ToExpressString() + ")");

        }
        return new Tuple<bool, string>(true, "Ok");
    }

    private bool InsertICJNotCosumMaterial(int Detail_ID, DataRow row)
    {

        var QtyWorningFlag = dc.usp_Company_Select().FirstOrDefault().QuantityWarning;
        if (QtyWorningFlag == ICJStoredProcFlags.QtyNotEnoughAndAsk.ToInt())
        {
            var funItemQty = dc.fun_ItemQty(row["Item_ID"].ToInt(), row["Store_ID"].ToInt(), null, row["Uom_ID"].ToInt(), this.SalesOrderID);
            if (funItemQty < row["Quantity"].ToDecimalOrDefault())
            {
                UserMessages.Message(null, Resources.UserInfoMessages.QtyNotEnough + " (" + row["StoreName"] + " : " + row["ItemName"] + " : " + row["BatchName"] + ")", string.Empty);
                this.ConfirmationMessage = string.Empty;
                return false;
            }


        }
        if (QtyWorningFlag == ICJStoredProcFlags.QtyNotEnoughAndStop.ToInt())
        {
            var funItemQty = dc.fun_ItemQty(row["Item_ID"].ToInt(), row["Store_ID"].ToInt(), null, row["Uom_ID"].ToInt(), this.SalesOrderID);
            if (funItemQty < row["Quantity"].ToDecimalOrDefault())
            {
                UserMessages.Message(null, Resources.UserInfoMessages.QtyNotEnough + " (" + row["StoreName"] + " : " + row["ItemName"] + " : " + row["BatchName"] + ")", string.Empty);
                this.ConfirmationMessage = string.Empty;
                return false;
            }


        }





        decimal? SalesCost = 0;
        int result = dc.usp_ICJ_Invoice(txtOperationDate.Text.ToDate(), row["Quantity"].ToDecimalOrDefault(), row["Item_ID"].ToInt(), row["Uom_ID"].ToInt(), row["Total"].ToDecimalOrDefault() * txtRatio.Text.ToDecimalOrDefault(), row["Batch_ID"].ToNullableInt(), row["Store_ID"].ToInt(), acBranch.Value.ToNullableInt(), DocumentsTableTypes.Invoice.ToInt(), this.Invoice_ID, Detail_ID, this.SalesOrderID, ref SalesCost);
        this.CalculatedSalesCost += SalesCost.Value;

        if ((result & ICJStoredProcFlags.QtyReserved.ToInt()) == ICJStoredProcFlags.QtyReserved.ToInt())
        {
            UserMessages.Message(null, Resources.UserInfoMessages.QtyReserved + " (" + row["StoreName"] + " : " + row["ItemName"] + " : " + row["BatchName"] + ")", string.Empty);
            this.ConfirmationMessage = string.Empty;
            return false;
        }

        if ((result & ICJStoredProcFlags.QtyNotEnoughAndStop.ToInt()) == ICJStoredProcFlags.QtyNotEnoughAndStop.ToInt())
        {
            UserMessages.Message(null, Resources.UserInfoMessages.QtyNotEnough + " (" + row["StoreName"] + " : " + row["ItemName"] + " : " + row["BatchName"] + ")", string.Empty);
            this.ConfirmationMessage = string.Empty;
            return false;
        }
        if ((result & ICJStoredProcFlags.BatchOrderWarning.ToInt()) == ICJStoredProcFlags.BatchOrderWarning.ToInt())
        {
            UserMessages.Message(null, Resources.UserInfoMessages.BatchOrderWarning + " (" + row["StoreName"] + " : " + row["ItemName"] + " : " + row["BatchName"] + ")", string.Empty);
            this.ConfirmationMessage = string.Empty;
            return false;
        }

        if ((result & ICJStoredProcFlags.BatchQtyNotEnough.ToInt()) == ICJStoredProcFlags.BatchQtyNotEnough.ToInt())
        {
            UserMessages.Message(null, Resources.UserInfoMessages.BatchQtyNotEnough + " (" + row["StoreName"] + " : " + row["ItemName"] + " : " + row["BatchName"] + ")", string.Empty);
            this.ConfirmationMessage = string.Empty;
            return false;
        }

        if ((result & ICJStoredProcFlags.QtyNotEnoughAndAsk.ToInt()) == ICJStoredProcFlags.QtyNotEnoughAndAsk.ToInt() && !this.ConfirmationAnswered)
        {
            this.ConfirmationMessage += "<br>\u2022 " + Resources.UserInfoMessages.QtyNotEnough + " (" + row["StoreName"] + " : " + row["ItemName"] + " : " + row["BatchName"] + ")";
        }
        if ((result & ICJStoredProcFlags.PriceLessThanCost.ToInt()) == ICJStoredProcFlags.PriceLessThanCost.ToInt() && !this.ConfirmationAnswered)
        {
            this.ConfirmationMessage += "<br><span style='color:red'> \u2022 " + Resources.UserInfoMessages.PriceLessThanCost + " (" + row["StoreName"] + " : " + row["ItemName"] + " : " + row["BatchName"] + ")</span>";
        }
        return true;
    }



    #endregion

    private void FillInvoice()
    {
        var idGene = Request.QueryString["GenerateInoice_ID"];
        var Qt_ID = Request.QueryString["Qt_ID"];

        if (string.IsNullOrEmpty(idGene) && string.IsNullOrEmpty(Qt_ID))
        {

            if (this.Invoice_ID == 0 && this.SalesOrderID == 0) return;
            var invoice = dc.usp_Invoice_SelectByID(EditMode ? this.Invoice_ID : this.SalesOrderID).FirstOrDefault();

            OperationsView.SourceDocTypeType_ID = DocumentsTableTypes.Invoice.ToInt();
            OperationsView.Source_ID = this.Invoice_ID;

            ddlCurrency.SelectedValue = invoice.Currency_ID.ToExpressString();
            txtRatio.Text = invoice.Ratio.ToExpressString();
            acBranch.Value = invoice.Branch_ID.ToStringOrEmpty();

            ddlTvae.SelectedValue = invoice.IsTax.ToExpressString();
            this.IsTaxFound = invoice.IsTax.ToIntOrDefault();


            this.FilterByBranchAndCurrency();
            txtOperationDate.Text = invoice.OperationDate.Value.ToExpressString();
            acCostCenter.Value = invoice.CostCenter_ID.ToStringOrEmpty();
            txtUserRefNo.Text = invoice.UserRefNo;
            if (invoice.DateDelivery != null)
                txtDeliveryDate.Text = invoice.DateDelivery.Value.ToExpressString();

            acCustomer.Value = invoice.Contact_ID.ToExpressString();
            // this.acCustomer_SelectedIndexChanged(null, null);
            acTelephone.Value = invoice.Telephone_ID.ToStringOrEmpty();
            acAddress.Value = invoice.DefaultAddress_ID.ToStringOrEmpty();
            acShipAddress.Value = invoice.ShipToAddress_ID.ToStringOrEmpty();
            acPaymentAddress.Value = invoice.PaymentAddress_ID.ToStringOrEmpty();
            acCashAccount.Value = invoice.CashAccount_ID.ToStringOrEmpty();
            acSalesRep.Value = invoice.SalesRep_ID.ToStringOrEmpty();
            txtCashDiscount.Text = invoice.CashDiscount.ToExpressString();
            txtAdditionals.Text = invoice.Additionals.ToExpressString();
            txtPercentageDiscount.Text = invoice.PercentageDiscount.ToExpressString();
            // txtFirstPaid.Text = invoice.FirstPaid.ToExpressString();
            //this.txtFirstPaid_TextChanged(null, null);
            lblTotal.Text = invoice.TotalAmount.ToExpressString();
            lblTotalDiscount.Text = invoice.TotalDiscount.ToExpressString();
            lblTotalTax.Text = invoice.TotalTax.ToExpressString();
            lblGrossTotal.Text = invoice.GrossTotalAmount.ToExpressString();
            txtNotes.Text = invoice.Notes;
            acdrivers.Value = invoice.Driver_ID.ToStringOrEmpty();
            txtCustomerName.Text = invoice.CustomerName;
            txtCustomerMobile.Text = invoice.CustomerMobile;
            ddlPaymentMethode.SelectedValue = invoice.typePayment_ID.ToExpressString();

            if (invoice.SalesOrder_ID.HasValue) this.SalesOrderID = invoice.SalesOrder_ID.Value;

            if (!string.IsNullOrEmpty(invoice.SalesOrderSerial) || this.SalesOrderID != 0)
            {
                lblSalesOrderNo.Text = EditMode ? invoice.SalesOrderSerial : invoice.Serial;
                divSalesOrderNo.Visible = true;
                ddlCurrency.Enabled = false;
                // acBranch.Enabled = false;
                acCustomer.Enabled = false;
                acSalesRep.Enabled = false;
            }

            if (EditMode)
            {
                txtSerial.Text = invoice.Serial;
                ucNav.SetText = invoice.Serial;
                this.DocRandomString = invoice.DocRandomString;
                lblCreatedBy.Text = invoice.CreatedByName;
                lblApprovedBy.Text = invoice.ApprovedBYName;
                this.ImgStatus = ((DocStatus)invoice.DocStatus_ID).ToExpressString();
                btnPrint.Visible = MyContext.PageData.IsPrint && (invoice.DocStatus_ID == 2);
                btnPrintInventoryOrder.Visible = MyContext.PageData.IsPrint;

                //pnlAddItem.Visible = (invoice.DocStatus_ID == 1);

                btnCancel.Visible = (invoice.DocStatus_ID == 1) && MyContext.PageData.IsDelete;
                btnApprove.Visible = (invoice.DocStatus_ID == 1) && MyContext.PageData.IsApprove;

                btnCancelApprove.Visible = !btnApprove.Visible && (invoice.DocStatus_ID == 2) && MyContext.PageData.IsNotApprove;
                btnApproveAccounting.Visible = (invoice.DocStatus_ID == 1) && MyContext.PageData.IsApproveAccounting;
                btnSave.Visible = (invoice.DocStatus_ID == 1) && ((MyContext.PageData.IsAdd && !EditMode) || (MyContext.PageData.IsEdit && EditMode));

                btnPrint.Visible = MyContext.PageData.IsPrint && (invoice.DocStatus_ID == 2);
                OperationsView.Visible = !btnApprove.Visible;
                this.DocStatus_ID = invoice.DocStatus_ID.Value;
            }

            // var lstItems = dc.usp_InvoiceDetailsIncludeTax_Select(EditMode ? this.Invoice_ID : this.SalesOrderID).ToList();


            var listItemsInvoiceDtails = dc.usp_InvoiceDetailsIncludeTax_Select(EditMode ? this.Invoice_ID : this.SalesOrderID).ToList();
            foreach (var item in listItemsInvoiceDtails.Select((value, index) => new { index, value }))
            {
                item.value.val1 = 23000 - (item.index + 1);
            }
            this.dtItems = listItemsInvoiceDtails.CopyToDataTable();


            //  this.dtItems = lstItems.CopyToDataTable();
            if (listItemsInvoiceDtails.Count() > 0)
            {
                acStore.Value = listItemsInvoiceDtails.FirstOrDefault().Store_ID.ToExpressString();
            }


            this.dtTaxes = dc.usp_DocuemntTaxes_Select(DocumentsTableTypes.Invoice.ToInt(), EditMode ? this.Invoice_ID : this.SalesOrderID, false).CopyToDataTable();
            this.BindItemsGrid();
            //gvTaxes.DataSource = this.dtTaxes;
            //gvTaxes.DataBind();


        }
        else if (!string.IsNullOrEmpty(Qt_ID))
        {
            var idInv = int.Parse(Qt_ID);
            this.Qauta_ID = idInv;
            var invoice = dc.usp_InvoiceQuota_SelectByID(idInv).FirstOrDefault();
            ddlCurrency.SelectedValue = invoice.Currency_ID.ToExpressString();
            txtRatio.Text = invoice.Ratio.ToExpressString();
            acBranch.Value = invoice.Branch_ID.ToStringOrEmpty();
            this.FilterByBranchAndCurrency();
            txtOperationDate.Text = invoice.OperationDate.Value.ToExpressString();
            acCostCenter.Value = invoice.CostCenter_ID.ToStringOrEmpty();
            txtUserRefNo.Text = invoice.UserRefNo;


            acCustomer.Value = invoice.Contact_ID.ToExpressString();
            // this.acCustomer_SelectedIndexChanged(null, null);
            acTelephone.Value = invoice.Telephone_ID.ToStringOrEmpty();
            acAddress.Value = invoice.DefaultAddress_ID.ToStringOrEmpty();
            acShipAddress.Value = invoice.ShipToAddress_ID.ToStringOrEmpty();
            acPaymentAddress.Value = invoice.PaymentAddress_ID.ToStringOrEmpty();
            acCashAccount.Value = invoice.CashAccount_ID.ToStringOrEmpty();
            acSalesRep.Value = invoice.SalesRep_ID.ToStringOrEmpty();
            txtCashDiscount.Text = invoice.CashDiscount.ToExpressString();
            txtAdditionals.Text = invoice.Additionals.ToExpressString();
            txtPercentageDiscount.Text = invoice.PercentageDiscount.ToExpressString();

            //this.txtFirstPaid_TextChanged(null, null);
            lblTotal.Text = invoice.TotalAmount.ToExpressString();
            lblTotalDiscount.Text = invoice.TotalDiscount.ToExpressString();
            lblTotalTax.Text = invoice.TotalTax.ToExpressString();
            lblGrossTotal.Text = invoice.GrossTotalAmount.ToExpressString();
            txtNotes.Text = invoice.Notes;
            invoice.DocStatus_ID = 1;
            this.ImgStatus = ((DocStatus)invoice.DocStatus_ID).ToExpressString();


            btnPrintInventoryOrder.Visible = MyContext.PageData.IsPrint;
            //pnlAddItem.Visible = (invoice.DocStatus_ID == 1);
            btnCancel.Visible = (invoice.DocStatus_ID == 1) && MyContext.PageData.IsDelete;
            btnApprove.Visible = (invoice.DocStatus_ID == 1) && MyContext.PageData.IsApprove;
            btnSave.Visible = (invoice.DocStatus_ID == 1) && ((MyContext.PageData.IsAdd) || (MyContext.PageData.IsEdit));

            this.DocStatus_ID = invoice.DocStatus_ID.Value;
            btnPrint.Visible = MyContext.PageData.IsPrint && (invoice.DocStatus_ID == 2);

            //this.dtItems = dc.usp_InvoiceDetailsIncludeTax_Select(idInv).CopyToDataTable();
            var listInvoiceDetailsQota = dc.usp_InvoiceQuotaDetails_Select(idInv).ToList();


            foreach (var item in listInvoiceDetailsQota)
            {


                DataRow r = this.dtItems.NewRow();
                r["ID"] = this.dtItems.GetID("ID");


                r["SerialNumber"] = string.Empty;
                r["Store_ID"] = item.Store_ID;
                r["Category_ID"] = item.Category_ID;
                r["Item_ID"] = item.Item_ID;
                r["ItemName"] = item.ItemName;

                r["IDCodeOperation"] = string.Empty;
                r["Policy"] = string.Empty;
                r["Capacity"] = string.Empty;
                r["Capacities"] = string.Empty;
                r["ItemDescription"] = string.Empty;
                r["DescribedName"] = string.Empty;
                r["UnitCost"] = item.UnitCost;
                r["UnitCostEvaluate"] = item.UnitCost;
                r["Quantity"] = item.Quantity;
                r["QtyInNumber"] = 0;
                r["Uom_ID"] = item.Uom_ID;
                r["UOMName"] = item.UOMName;
                r["Batch_ID"] = DBNull.Value;
                r["BatchName"] = string.Empty;
                r["PercentageDiscount"] = 0;
                r["CashDiscount"] = 0;
                r["TotalTax"] = 0;
                r["Notes"] = item.Notes;
                r["StoreName"] = item.StoreName;
                r["Barcode"] = item.Barcode;
                r["CategoryName"] = item.CategoryName;

                //var Tax = dc.usp_Taxes_Select(acItemTax.Value.ToInt(), string.Empty).FirstOrDefault();
                //decimal taxInclude = TypeTax == 2 ? (Decimal.Divide((Tax != null ? Tax.PercentageValue.Value : 0), (100M + (Tax != null ? Tax.PercentageValue.Value : 0)))) : Decimal.Divide((Tax != null ? Tax.PercentageValue.Value : 0), (100M));
                //decimal unitCost = TypeTax == 2 ? (txtCost.Text.ToDecimalOrDefault() - txtCost.Text.ToDecimalOrDefault() * taxInclude) : txtCost.Text.ToDecimalOrDefault();
                //r["TotalCostBeforTax"] = Math.Round(item.UnitCost.ToDecimalOrDefault() * item.Quantity.ToDecimalOrDefault(), 3).ToDecimalOrDefault();
                //if (Tax != null)
                //{
                //    r["TaxName"] = item.TaxName;
                //    r["Tax_ID"] = Tax.ID;
                //    r["TaxPercentageValue"] = Tax.PercentageValue;
                //    if (Tax.OnInvoiceType.HasValue) r["TaxOnInvoiceType"] = Tax.OnInvoiceType;
                //    if (Tax.OnReceiptType.HasValue) r["TaxOnReceiptType"] = Tax.OnReceiptType;
                //    if (Tax.OnDocCreditType.HasValue) r["TaxOnDocCreditType"] = Tax.OnDocCreditType;
                //    r["TaxSalesAccountID"] = Tax.SalesAccountID;
                //    r["TaxPurchaseAccountID"] = Tax.PurchaseAccountID;
                //}


                r["Total"] = 0;
                r["GrossTotal"] = 0;
                if (this.EditID == 0) this.dtItems.Rows.Add(r);
            }



            this.dtTaxes = dc.usp_DocuemntTaxes_Select(DocumentsTableTypes.Invoice.ToInt(), idInv, false).CopyToDataTable();
            this.BindItemsGrid();
            // gvTaxes.DataSource = this.dtTaxes;
            // gvTaxes.DataBind();
        }
        else
        {


            var idInv = int.Parse(idGene);


            var invoice = dc.usp_Invoice_SelectByID(idInv).FirstOrDefault();
            ddlCurrency.SelectedValue = invoice.Currency_ID.ToExpressString();
            txtRatio.Text = invoice.Ratio.ToExpressString();
            acBranch.Value = invoice.Branch_ID.ToStringOrEmpty();
            this.FilterByBranchAndCurrency();
            txtOperationDate.Text = invoice.OperationDate.Value.ToExpressString();
            acCostCenter.Value = invoice.CostCenter_ID.ToStringOrEmpty();
            txtUserRefNo.Text = invoice.UserRefNo;


            acCustomer.Value = invoice.Contact_ID.ToExpressString();
            // this.acCustomer_SelectedIndexChanged(null, null);
            acTelephone.Value = invoice.Telephone_ID.ToStringOrEmpty();
            acAddress.Value = invoice.DefaultAddress_ID.ToStringOrEmpty();
            acShipAddress.Value = invoice.ShipToAddress_ID.ToStringOrEmpty();
            acPaymentAddress.Value = invoice.PaymentAddress_ID.ToStringOrEmpty();
            acCashAccount.Value = invoice.CashAccount_ID.ToStringOrEmpty();
            acSalesRep.Value = invoice.SalesRep_ID.ToStringOrEmpty();
            txtCashDiscount.Text = invoice.CashDiscount.ToExpressString();
            txtAdditionals.Text = invoice.Additionals.ToExpressString();
            txtPercentageDiscount.Text = invoice.PercentageDiscount.ToExpressString();
            // txtFirstPaid.Text = invoice.FirstPaid.ToExpressString();
            // this.txtFirstPaid_TextChanged(null, null);
            lblTotal.Text = invoice.TotalAmount.ToExpressString();
            lblTotalDiscount.Text = invoice.TotalDiscount.ToExpressString();
            lblTotalTax.Text = invoice.TotalTax.ToExpressString();
            lblGrossTotal.Text = invoice.GrossTotalAmount.ToExpressString();
            txtNotes.Text = invoice.Notes;
            invoice.DocStatus_ID = 1;



            // txtSerial.Text = invoice.Serial;
            //  this.DocRandomString = invoice.DocRandomString;
            //lblCreatedBy.Text = invoice.CreatedByName;
            // lblApprovedBy.Text = invoice.ApprovedBYName;
            this.ImgStatus = ((DocStatus)invoice.DocStatus_ID).ToExpressString();


            btnPrintInventoryOrder.Visible = MyContext.PageData.IsPrint;
            //pnlAddItem.Visible = (invoice.DocStatus_ID == 1);
            btnCancel.Visible = (invoice.DocStatus_ID == 1) && MyContext.PageData.IsDelete;
            btnApprove.Visible = (invoice.DocStatus_ID == 1) && MyContext.PageData.IsApprove;
            btnSave.Visible = (invoice.DocStatus_ID == 1) && ((MyContext.PageData.IsAdd) || (MyContext.PageData.IsEdit));
            //gvItems.Columns[gvItems.Columns.Count - 1].Visible = gvItems.Columns[gvItems.Columns.Count - 2].Visible = (invoice.DocStatus_ID == 1);
            // gvTaxes.Columns[gvTaxes.Columns.Count - 1].Visible = (invoice.DocStatus_ID == 1);
            this.DocStatus_ID = invoice.DocStatus_ID.Value;
            btnPrint.Visible = MyContext.PageData.IsPrint && (invoice.DocStatus_ID == 2);



            var listItemsInvoiceDtails = dc.usp_InvoiceDetailsIncludeTax_Select(idInv).ToList();
            foreach (var item in listItemsInvoiceDtails.Select((value, index) => new { index, value }))
            {
                item.value.val1 = item.index;
            }
            this.dtItems = listItemsInvoiceDtails.CopyToDataTable();
            //  this.dtItems = dc.usp_InvoiceDetailsIncludeTax_Select(idInv).CopyToDataTable();
            // this.dtItems = dc.usp_InvoiceDetails_Select(EditMode ? this.Invoice_ID : this.SalesOrderID).CopyToDataTable();
            this.dtTaxes = dc.usp_DocuemntTaxes_Select(DocumentsTableTypes.Invoice.ToInt(), idInv, false).CopyToDataTable();
            this.BindItemsGrid();
            //gvTaxes.DataSource = this.dtTaxes;
            //gvTaxes.DataBind();
        }

    }
    private void BindItemsGrid()
    {
        this.Calculate();
        if (DocStatus_ID == 1)
        {
            DataRow r = null;
            r = this.dtItems.NewRow();
            r["ID"] = this.dtItems.GetID("ID");
            this.dtItems.Rows.Add(r);
        }

        DataView dv = dtItems.DefaultView;
        dv.Sort = "Val1 desc";
        DataTable sortedDT = dv.ToTable();

        gvItems.DataSource = this.dtItems;
        gvItems.DataBind();
        acBranch.Enabled = ddlTvae.Enabled = (gvItems.Rows.Count == 0) && (this.MyContext.UserProfile.Branch_ID == null);
    }
    private void ClearItemForm()
    {
        if (MyContext.UserProfile.Store_ID != null) acStore.Value = MyContext.UserProfile.Store_ID.ToStringOrEmpty();
        //acCategory.Clear();
        //txtCItem.Clear();
        //txtQtyOffer.Clear();
        // lblTotalRowBeforTax.Text = string.Empty;
        // chkSame.Checked = false;
        //  this.FilterItems();
        // this.acItem_SelectedIndexChanged(null, null);


    }
    private void SetEditMode()
    {
        if (Request["ID"] != null)
        {
            this.EditMode = true;
            this.Invoice_ID = Request["ID"].ToInt();
        }
        if (Request["SalesOrderID"] != null)
        {
            this.SalesOrderID = Request["SalesOrderID"].ToInt();
        }
    }
    private void SetDefaults()
    {
        if (Page.IsPostBack) return;
        var company = dc.usp_Company_Select().FirstOrDefault();
        var defaults = dc.usp_CashBillDefaults_Select(acBranch.Value.ToNullableInt(), MyContext.UserProfile.Contact_ID).First();

        if (company.AutoDate.Value || this.IsCashInvoice) txtOperationDate.Text = DateTime.Now.Date.ToString("d/M/yyyy");
        //if (txtOperationDate.IsNotEmpty) this.ddlCurrency_SelectedIndexChanged(null, null);

        if (this.IsCashInvoice && defaults.DefaultCustomer_ID.HasValue) acCustomer.Value = defaults.DefaultCustomer_ID.ToExpressString();

        // if (acCustomer.HasValue) this.acCustomer_SelectedIndexChanged(null, null);

        if ((defaults.UserHasCashAccount.Value || this.IsCashInvoice) && defaults.DefaultCashAccount_ID.HasValue) acCashAccount.Value = defaults.DefaultCashAccount_ID.ToExpressString();

        if ((defaults.UserHasStore.Value || this.IsCashInvoice) && defaults.DefaultStore_ID.HasValue) acStore.Value = defaults.DefaultStore_ID.ToExpressString();
        //  if (acStore.HasValue) this.acStore_SelectedIndexChanged(null, null);

        txtOperationDate.Enabled = !company.LockAutoDate.Value;
        acCashAccount.Enabled = !((MyContext.UserProfile.CashierAccount_ID != null) && ((MyContext.Features.BranchesEnabled && MyContext.UserProfile.Branch_ID != null) || !MyContext.Features.BranchesEnabled));
        acStore.Enabled = !((MyContext.UserProfile.Store_ID != null) && ((MyContext.Features.BranchesEnabled && MyContext.UserProfile.Branch_ID != null) || !MyContext.Features.BranchesEnabled));
        if (this.IsCashInvoice) ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "focusbarcode", "$(document).ready(function(){  setTimeout(function(){$('#cph_txtBarcode').focus();},500);});", true);
    }
    private void IsRequiresField()
    {
        //foreach (var control in dc.usp_HiddenControls_Select(MyContext.PageData.PageID, MyContext.UserProfile.Contact_ID))
        //{
        //    if (control.ControlUniqueID == "cph_txtPolicy")
        //    {
        //        txtPolicy.IsRequired = false;
        //        gvItems.Columns[6].Visible = false;
        //    }
        //    if (control.ControlUniqueID == "cph_txtCode")
        //    {
        //        txtCode.IsRequired = false;
        //        gvItems.Columns[5].Visible = false;
        //    }
        //    if (control.ControlUniqueID == "cph_txtInvoiceDate")
        //    {
        //        txtInvoiceDate.IsRequired = false;
        //    }

        //    if (control.ControlUniqueID == "cph_txtCapacity")
        //    {

        //        gvItems.Columns[8].Visible = false;
        //    }
        //    if (control.ControlUniqueID == "cph_txtCapacities")
        //    {

        //        gvItems.Columns[9].Visible = false;
        //    }
        //}
    }
    #endregion

    #region Event
    protected void ddlNumber_SelectedIndexChanged(object sender, EventArgs e)
    {

    }
    protected void TextBox1_TextChanged(object sender, EventArgs e)
    {
        var value = (sender as TextBox).Text;
    }
    protected void acItem_SelectedIndexChanged(object sender, AutoCompleteEventArgs e)
    {
        var s = (GridViewRow)(((CustomControls_ucAutocomplete)sender).Parent.Parent);
        var index = s.RowIndex;
        var itemValueSelected = ((CustomControls_ucAutocomplete)gvItems.Rows[index].FindControl("acItem"));
        if (itemValueSelected.Value != "")
        {
            var acUnit = ((CustomControls_ucAutocomplete)gvItems.Rows[index].FindControl("acUnit"));
            acUnit.ContextKey = string.Empty + itemValueSelected.Value;
            acUnit.AutoCompleteFocus();
        }
    }
    protected void acBranch_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            this.FilterByBranchAndCurrency();
            if (acBranch.Value != null)
            {
                var getStores = dc.usp_StoresAutoCompelete_Select(int.Parse(acBranch.Value)).ToList();
                if (getStores.Count == 1)
                    acStore.Value = getStores.First().ID.ToString();



            }
            // if (sender != null) this.FocusNextControl(sender);
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }
    protected void txtPercentageDiscount_TextChanged(object sender, EventArgs e)
    {
        try
        {

            if (txtPercentageDiscount.Text.ToDecimalOrDefault() > 100) txtPercentageDiscount.Text = "0";
            this.Calculate();

        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }
    protected void linkButtonAddItem_Click(object sender, EventArgs e)
    {


        int Index = ((GridViewRow)((LinkButton)sender).Parent.Parent).RowIndex;


        DataRow r = null;
        //if (this.EditID == 0)
        //{

        r = this.dtItems.NewRow();
        r["ID"] = this.dtItems.GetID("ID");

        //}
        //else
        //{
        //    r = this.dtItems.Select("ID=" + this.EditID)[0];
        //}

        //if (ddlTvae.SelectedValue.ToNullableInt() == 2)
        //{
        //    acItemTax.Clear();
        //}

        r["Store_ID"] = acStore.Value;
        //r["Category_ID"] = acCategory.Value;

        //  var itemValueSelected = ((CustomControls_ucAutocomplete)gvGeneralJournalList.Rows[Index].FindControl("acItem"));

        // r["Item_ID"] = itemValueSelected.Value;
        // r["ItemName"] = itemValueSelected.Text;

        // r["IDCodeOperation"] = txtCode.Text;
        //r["Policy"] = txtPolicy.Text;
        //r["Capacity"] = txtCapacity.Text;
        //r["Capacities"] = txtCapacities.Text;
        //r["ItemDescription"] = acItemDescribed.Value;
        //r["DescribedName"] = acItemDescribed.Text;

        var txtCost = ((TextBox)gvItems.Rows[Index].FindControl("txtCost"));
        r["UnitCost"] = txtCost.Text;
        r["UnitCostEvaluate"] = txtCost.Text;

        var txtQty = ((TextBox)gvItems.Rows[Index].FindControl("txtQty"));
        r["Quantity"] = txtQty.Text;
        //r["QtyInNumber"] = txtQtyInNumber.Text.ToDecimalOrDefault();


        //var acUnit = ((CustomControls_ucAutocomplete)gvGeneralJournalList.Rows[Index].FindControl("acUnit"));
        //r["Uom_ID"] = acUnit.Value;
        //r["UOMName"] = acUnit.Text;



        //r["Batch_ID"] = (acBatchID.HasValue && acBatchID.Value.ToNullableInt() != 0) ? acBatchID.Value.ToIntOrDBNULL() : DBNull.Value;
        //r["BatchName"] = (acBatchID.HasValue && acBatchID.Value.ToNullableInt() != 0) ? acBatchID.Text.Substring(0, acBatchID.Text.IndexOf((char)65279)) : string.Empty;

        var txtItemPercentageDiscount = ((TextBox)gvItems.Rows[Index].FindControl("txtItemPercentageDiscount"));
        var txtItemCashDiscount = ((TextBox)gvItems.Rows[Index].FindControl("txtItemCashDiscount"));

        r["PercentageDiscount"] = txtItemPercentageDiscount.Text.ToDecimalOrDefault();
        r["CashDiscount"] = txtItemCashDiscount.Text.ToDecimalOrDefault();
        r["TotalTax"] = 0;
        //r["Notes"] = txtItemNotes.Text;
        r["StoreName"] = acStore.Text;
        //r["Barcode"] = txtBarcode.Text;
        //r["CategoryName"] = acCategory.Text;
        //  var Tax = dc.usp_Taxes_Select(acItemTax.Value.ToInt(), string.Empty).FirstOrDefault();

        //  r["TotalCostBeforTax"] = txtCost.Text.ToDecimalOrDefault() * txtQty.Text.ToDecimalOrDefault();
        // decimal taxInclude = TypeTax == 2 ? (Decimal.Divide((Tax != null ? Tax.PercentageValue.Value : 0), (100M + (Tax != null ? Tax.PercentageValue.Value : 0)))) : Decimal.Divide((Tax != null ? Tax.PercentageValue.Value : 0), (100M));
        // decimal unitCost = TypeTax == 2 ? (txtCost.Text.ToDecimalOrDefault() - txtCost.Text.ToDecimalOrDefault() * taxInclude) : txtCost.Text.ToDecimalOrDefault();
        // r["TotalCostBeforTax"] = Math.Round(unitCost * txtQty.Text.ToDecimalOrDefault(), 3).ToDecimalOrDefault();





        ////need Options
        //r["InvoiceDate"] = txtInvoiceDate.Text.ToDateOrDBNULL();
        ////رقم التشغيلة
        //r["ProductionDate"] = txtProductionDate.Text.ToDateOrDBNULL();
        //r["ExpirationDate"] = txtExpirationDate.Text.ToDateOrDBNULL();
        //if (acItemTax.HasValue)
        //{

        //    r["TaxName"] = Tax.Name;
        //    r["Tax_ID"] = acItemTax.Value;
        //    r["TaxPercentageValue"] = Tax.PercentageValue;
        //    if (Tax.OnInvoiceType.HasValue) r["TaxOnInvoiceType"] = Tax.OnInvoiceType;
        //    if (Tax.OnReceiptType.HasValue) r["TaxOnReceiptType"] = Tax.OnReceiptType;
        //    if (Tax.OnDocCreditType.HasValue) r["TaxOnDocCreditType"] = Tax.OnDocCreditType;
        //    r["TaxSalesAccountID"] = Tax.SalesAccountID;
        //    r["TaxPurchaseAccountID"] = Tax.PurchaseAccountID;
        //}
        //else
        //{
        //    r["TaxName"] = DBNull.Value;
        //    r["Tax_ID"] = DBNull.Value;
        //    r["TaxPercentageValue"] = DBNull.Value;
        //    r["TaxOnInvoiceType"] = DBNull.Value;
        //    r["TaxOnReceiptType"] = DBNull.Value;
        //    r["TaxOnDocCreditType"] = DBNull.Value;
        //    r["TaxSalesAccountID"] = DBNull.Value;
        //    r["TaxPurchaseAccountID"] = DBNull.Value;
        //}
        r["Total"] = 0;
        r["GrossTotal"] = 0;
        r["Val1"] = 15000 - dtItems.Rows.Count + 1;
        this.dtItems.Rows.Add(r);
        //this.ClearItemForm();
        //this.BindItemsGrid();
        //lblTotalRow.Text = "";

        //if (this.dtItems.Rows.Count > 0)
        //{
        //    var objs = this.dtItems.Select().FirstOrDefault();
        //    if (objs != null)
        //    {
        //        acStore.Value = objs["Store_ID"].ToExpressString();
        //        acStore.Enabled = false;
        //    }

        //}

        DataView dv = dtItems.DefaultView;
        dv.Sort = "Val1 desc";
        DataTable sortedDT = dv.ToTable();

        gvItems.DataSource = dtItems;
        gvItems.DataBind();
        decimal tot = 0;
        decimal totalDiscount = 0;
        decimal totalTax = 0;
        foreach (DataRow row in this.dtItems.Rows)
        {
            tot += row["Quantity"].ToDecimalOrDefault() * row["UnitCost"].ToDecimalOrDefault();
        }

        lblTotal.Text = tot.ToExpressString();


        // decimal total = 0; ;
        // gvGeneralJournalList.FooterRow.Cells[0].Text = "Total";
        // gvGeneralJournalList.FooterRow.Cells[1].Font.Bold = true;
        // gvGeneralJournalList.FooterRow.Cells[1].HorizontalAlign = HorizontalAlign.Left;
        // //for (int k = 1; k < dtItems.Columns.Count - 1; k++)
        // //{
        // total = dtItems.AsEnumerable().Sum(row => row.Field<decimal>(dtItems.Columns[3].ToString()) * row.Field<decimal>(dtItems.Columns[4].ToString()));
        //     gvGeneralJournalList.FooterRow.Cells[4].Text = total.ToString();
        //     gvGeneralJournalList.FooterRow.Cells[4].Font.Bold = true;
        //     gvGeneralJournalList.FooterRow.BackColor = System.Drawing.Color.Beige;
        //// }  


    }
    protected void linkButtonDeleteItem_Click(object sender, EventArgs e)
    {

        try
        {
            int Index = ((GridViewRow)((LinkButton)sender).Parent.Parent).RowIndex;

            var ID = ((Label)gvItems.Rows[Index].FindControl("lblID")).Text.ToIntOrDefault();
            DataRow dr = this.dtItems.Select("ID=" + ID.ToExpressString())[0];
            dr.Delete();
            gvItems.DataSource = dtItems;
            gvItems.DataBind();

            foreach (GridViewRow itemX in gvItems.Rows)
            {
                CalulateRowTotals(itemX.RowIndex, 0);
            } this.Calculate();
            UserMessages.Message(this.MyContext.PageData.PageTitle, Resources.UserInfoMessages.OperationSuccess, string.Empty);
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
        this.Calculate();
    }
    protected void acUnit_SelectedIndexChanged(object sender, AutoCompleteEventArgs e)
    {
        var s = (GridViewRow)(((CustomControls_ucAutocomplete)sender).Parent.Parent);
        var index = s.RowIndex;
        var acUnit = ((CustomControls_ucAutocomplete)gvItems.Rows[index].FindControl("acUnit"));
        if (acUnit.Value != "")
        {
            var txtQty = ((TextBox)gvItems.Rows[index].FindControl("txtQty"));
            txtQty.Focus();
        }

    }
    protected void txtSerach_TextChanged(object sender, EventArgs e)
    {
        this.FillItemPopup(txtSerach.TrimmedText);
        mpeFastAddNew.Show();
    }
    protected void btnGetSelectedItemsPopup_Click(object sender, EventArgs e)
    {



        if (!acStore.HasValue)
        {
            UserMessages.Message(null, Resources.UserInfoMessages.StoresRequired, string.Empty);
            acStore.AutoCompleteFocus();

        }
        else
        {

            var list = new List<ItemsSelected>();
            foreach (GridViewRow row in gvItemAdvanced.Rows)
            {
                if (row.RowType == DataControlRowType.DataRow)
                {
                    CheckBox chkRow = (row.Cells[0].FindControl("chkSelect") as CheckBox);
                    TextBox txtQty = (row.Cells[0].FindControl("txtQtyItems") as TextBox);
                    TextBox txtPrice = (row.Cells[0].FindControl("txtUCItems") as TextBox);


                    if (chkRow.Checked)
                    {
                        var id = gvItemAdvanced.DataKeys[row.RowIndex]["ID"].ToInt();
                        var Name = gvItemAdvanced.DataKeys[row.RowIndex]["Name"].ToExpressString();
                        var Uom_ID = gvItemAdvanced.DataKeys[row.RowIndex]["UOM_ID"].ToIntOrDefault();
                        var DefaultPrice = gvItemAdvanced.DataKeys[row.RowIndex]["DefaultPrice"].ToDecimalOrDefault();
                        var Tax_ID = gvItemAdvanced.DataKeys[row.RowIndex]["Tax_ID"].ToIntOrDefault();
                        var TaxName = gvItemAdvanced.DataKeys[row.RowIndex]["TaxName"].ToExpressString();
                        var OnInvoiceType = gvItemAdvanced.DataKeys[row.RowIndex]["OnInvoiceType"].ToIntOrDefault();
                        var OnReceiptType = gvItemAdvanced.DataKeys[row.RowIndex]["OnReceiptType"].ToIntOrDefault();
                        var PurchaseAccountID = gvItemAdvanced.DataKeys[row.RowIndex]["PurchaseAccountID"].ToIntOrDefault();
                        var SalesAccountID = gvItemAdvanced.DataKeys[row.RowIndex]["SalesAccountID"].ToIntOrDefault();
                        var PercentageValue = gvItemAdvanced.DataKeys[row.RowIndex]["PercentageValue"].ToDecimalOrDefault();
                        var Barcode = gvItemAdvanced.DataKeys[row.RowIndex]["Barcode"].ToExpressString();


                        list.Add(new ItemsSelected()
                        {
                            ID = id,
                            Name = Name,
                            Uom_ID = Uom_ID,
                            Price = txtPrice.Text.ToDecimalOrDefault(),
                            Qty = txtQty.Text.ToDecimalOrDefault(),
                            Tax_ID = Tax_ID,
                            TaxName = TaxName,
                            OnInvoiceType = OnInvoiceType,
                            OnReceiptType = OnReceiptType,
                            PurchaseAccountID = PurchaseAccountID,
                            SalesAccountID = SalesAccountID,
                            PercentageValue = PercentageValue,
                            Barcode = Barcode
                        });
                        chkRow.Checked = false;
                    }
                }
            }

            foreach (ItemsSelected item in list)
            {
                DataRow r = null;
                r = this.dtItems.NewRow();
                r["ID"] = this.dtItems.GetID("ID");

                r["Item_ID"] = item.ID;
                r["ItemName"] = item.Name;
                r["Uom_ID"] = item.Uom_ID;
                r["UOMName"] = item.UomName;
                r["UnitCost"] = item.Price.ToString(NbrHashNeerDecimal).ToDecimalOrDefault(); ;
                r["UnitCostEvaluate"] = item.Price.ToString(NbrHashNeerDecimal).ToDecimalOrDefault(); ;
                r["Quantity"] = item.Qty;
                r["Total"] = 0;
                r["GrossTotal"] = 0;
                r["Val1"] = 15000 - dtItems.Rows.Count + 1;
                r["PercentageDiscount"] = 0;
                r["CashDiscount"] = 0;
                r["TotalTax"] = 0;
                r["StoreName"] = acStore.Text;

                // r["InvoiceDate"] = txtInvoiceDate.Text.ToDateOrDBNULL();
                if (ddlTvae.SelectedIndex == 0)
                {
                    //var Tax = dc.usp_Taxes_Select(item.taxID, string.Empty).FirstOrDefault();
                    r["TaxName"] = item.TaxName;
                    r["Tax_ID"] = item.Tax_ID;
                    r["TaxPercentageValue"] = item.PercentageValue;
                    if (item.OnInvoiceType > 0) r["TaxOnInvoiceType"] = item.OnInvoiceType;
                    if (item.OnReceiptType > 0) r["TaxOnReceiptType"] = item.OnReceiptType;
                    // if (Tax.OnDocCreditType.HasValue) r["TaxOnDocCreditType"] = Tax.OnDocCreditType;
                    r["TaxSalesAccountID"] = item.SalesAccountID;
                    r["TaxPurchaseAccountID"] = item.PurchaseAccountID;
                }
                else
                {
                    r["TaxName"] = DBNull.Value;
                    r["Tax_ID"] = DBNull.Value;
                    r["TaxPercentageValue"] = DBNull.Value;
                    r["TaxOnInvoiceType"] = DBNull.Value;
                    r["TaxOnReceiptType"] = DBNull.Value;
                    r["TaxOnDocCreditType"] = DBNull.Value;
                    r["TaxSalesAccountID"] = DBNull.Value;
                    r["TaxPurchaseAccountID"] = DBNull.Value;
                }
                r["Barcode"] = item.Barcode;
                r["Total"] = 0;
                r["GrossTotal"] = 0;
                this.dtItems.Rows.Add(r);

                DataView dv = dtItems.DefaultView;
                dv.Sort = "Val1 desc";
                DataTable sortedDT = dv.ToTable();




            }
            gvItems.DataSource = dtItems;
            gvItems.DataBind();
            foreach (GridViewRow item in gvItems.Rows)
            {
                CalulateRowTotals(item.RowIndex, 0);
            }
            this.Calculate();
        }



    }
    protected void ddlUnit_SelectedIndexChanged(object sender, EventArgs e)
    {
        var price = (sender as ItemsUnitDDL).UPrice;


    }
    protected void gvItemAdvanced_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        try
        {
            gvItemAdvanced.PageIndex = e.NewPageIndex;
            FillItemPopup();
            mpeFastAddNew.Show();
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }
    protected void gvGeneralJournalList_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            int ID = gvItems.DataKeys[e.RowIndex]["ID"].ToInt();
            DataRow dr = this.dtItems.Select("ID=" + ID.ToExpressString())[0];
            dr.Delete();
            this.FillItemPopup();

            UserMessages.Message(this.MyContext.PageData.PageTitle, Resources.UserInfoMessages.OperationSuccess, string.Empty);
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }
    protected void txtQty_TextChanged(object sender, EventArgs e)
    {

        var txt = (sender as TextBox);
        int Index = ((GridViewRow)((TextBox)sender).Parent.Parent).RowIndex;
        var lblID = ((Label)gvItems.Rows[Index].FindControl("lblID"));
        DataRow r = this.dtItems.Select("ID=" + lblID.Text.ToIntOrDefault())[0];
        r["Quantity"] = txt.Text.ToDecimalOrDefault();
        this.Calculate();

        CalulateRowTotals(Index, lblID.Text.ToIntOrDefault());




    }
    protected void txtCost_TextChanged(object sender, EventArgs e)
    {
        var txt = (sender as TextBox);
        int Index = ((GridViewRow)((TextBox)sender).Parent.Parent).RowIndex;
        var lblID = ((Label)gvItems.Rows[Index].FindControl("lblID"));
        DataRow r = this.dtItems.Select("ID=" + lblID.Text.ToIntOrDefault())[0];
        r["UnitCostEvaluate"] = txt.Text.ToDecimalOrDefault();
        this.Calculate();

        CalulateRowTotals(Index, lblID.Text.ToIntOrDefault());


    }
    protected void txtItemCashDiscount_TextChanged(object sender, EventArgs e)
    {
        var txt = (sender as TextBox);
        int Index = ((GridViewRow)((TextBox)sender).Parent.Parent).RowIndex;
        var lblID = ((Label)gvItems.Rows[Index].FindControl("lblID"));
        DataRow r = this.dtItems.Select("ID=" + lblID.Text.ToIntOrDefault())[0];
        r["CashDiscount"] = txt.Text.ToDecimalOrDefault();
        this.Calculate();
        CalulateRowTotals(Index, lblID.Text.ToIntOrDefault());
    }
    protected void txtItemPercentageDiscount_TextChanged(object sender, EventArgs e)
    {
        var txt = (sender as TextBox);
        int Index = ((GridViewRow)((TextBox)sender).Parent.Parent).RowIndex;
        var lblID = ((Label)gvItems.Rows[Index].FindControl("lblID"));
        DataRow r = this.dtItems.Select("ID=" + lblID.Text.ToIntOrDefault())[0];
        r["PercentageDiscount"] = txt.Text.ToDecimalOrDefault();
        this.Calculate();
        CalulateRowTotals(Index, lblID.Text.ToIntOrDefault());



    }
    protected void txtBarcode_TextChanged(object sender, EventArgs e)
    {
        try
        {
            var txtBarcode = (sender as TextBox);
            if (!acStore.HasValue)
            {
                UserMessages.Message(null, Resources.UserInfoMessages.StoresRequired, string.Empty);

                txtBarcode.Text = string.Empty;
                acStore.AutoCompleteFocus();

            }
            else if (txtBarcode.Text != string.Empty)
            {

                int Index = ((GridViewRow)((TextBox)sender).Parent.Parent).RowIndex;

                var item = Items_Select.Where(c => c.Barcode.StartsWith(txtBarcode.Text)).FirstOrDefault();
                if (item != null)
                {

                    DataRow r = null;
                    r = this.dtItems.NewRow();
                    r["ID"] = this.dtItems.GetID("ID");
                    r["Store_ID"] = acStore.Value.ToIntOrDefault();
                    r["Item_ID"] = item.ID;
                    r["ItemName"] = item.Name;
                    r["Uom_ID"] = item.UOM_ID;
                    r["UOMName"] = item.UOMName;
                    r["UnitCost"] = item.DefaultPrice.ToDecimalOrDefault().ToString(NbrHashNeerDecimal).ToDecimalOrDefault(); ;
                    r["UnitCostEvaluate"] = item.DefaultPrice.ToDecimalOrDefault().ToString(NbrHashNeerDecimal).ToDecimalOrDefault(); ;
                    r["Quantity"] = 1;
                    r["Total"] = 0;
                    r["GrossTotal"] = 0;
                    r["Val1"] = 15000 - dtItems.Rows.Count + 1;
                    r["PercentageDiscount"] = 0;
                    r["CashDiscount"] = 0;
                    r["TotalTax"] = 0;
                    r["StoreName"] = acStore.Text;
                    r["Barcode"] = item.Barcode;
                    // r["InvoiceDate"] = txtInvoiceDate.Text.ToDateOrDBNULL();
                    if (ddlTvae.SelectedIndex == 0)
                    {
                        //var Tax = dc.usp_Taxes_Select(item.taxID, string.Empty).FirstOrDefault();
                        r["TaxName"] = item.TaxName;
                        r["Tax_ID"] = item.Tax_ID;
                        r["TaxPercentageValue"] = item.PercentageValue;
                        if (item.OnInvoiceType > 0) r["TaxOnInvoiceType"] = item.OnInvoiceType;
                        if (item.OnReceiptType > 0) r["TaxOnReceiptType"] = item.OnReceiptType;
                        // if (Tax.OnDocCreditType.HasValue) r["TaxOnDocCreditType"] = Tax.OnDocCreditType;
                        r["TaxSalesAccountID"] = item.SalesAccountID;
                        r["TaxPurchaseAccountID"] = item.PurchaseAccountID;
                    }
                    else
                    {
                        r["TaxName"] = DBNull.Value;
                        r["Tax_ID"] = DBNull.Value;
                        r["TaxPercentageValue"] = DBNull.Value;
                        r["TaxOnInvoiceType"] = DBNull.Value;
                        r["TaxOnReceiptType"] = DBNull.Value;
                        r["TaxOnDocCreditType"] = DBNull.Value;
                        r["TaxSalesAccountID"] = DBNull.Value;
                        r["TaxPurchaseAccountID"] = DBNull.Value;
                    }

                    r["Total"] = 0;
                    r["GrossTotal"] = 0;
                    this.dtItems.Rows.Add(r);

                    DataView dv = dtItems.DefaultView;
                    dv.Sort = "Val1 desc";
                    DataTable sortedDT = dv.ToTable();


                    gvItems.DataSource = dtItems;
                    gvItems.DataBind();


                    var txtBarcodeNewLine = ((TextBox)gvItems.Rows[this.dtItems.Rows.Count - 1].FindControl("txtBarcode"));
                    txtBarcodeNewLine.Focus();




                    this.Calculate();
                    //CalulateRowTotals(Index);
                    foreach (GridViewRow itemX in gvItems.Rows)
                    {
                        CalulateRowTotals(itemX.RowIndex, 0);
                    }
                }
                else
                {
                    ScriptManager.RegisterClientScriptBlock(this, GetType(), "uKey", "PlaySound_Warning();", true);
                    //ScriptManager.RegisterStartupScript(Button1, this.GetType(), "", "playSound()", true);
                    txtBarcode.Text = string.Empty;
                    txtBarcode.Focus();
                }


            }

        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }
    protected void txtGrossTotalItem_TextChanged(object sender, EventArgs e)
    {



        var txt = (sender as TextBox);
        int Index = ((GridViewRow)((TextBox)sender).Parent.Parent).RowIndex;
        var lblID = ((Label)gvItems.Rows[Index].FindControl("lblID"));


        DataRow r = this.dtItems.Select("ID=" + lblID.Text.ToIntOrDefault())[0];
        var Qty = r["Quantity"].ToDecimalOrDefault();
        var Cost = r["UnitCost"].ToDecimalOrDefault();
        var OldTotalCost = Qty * Cost;
        var NewWritingCost = txt.Text.ToDecimalOrDefault();
        // r["CashDiscount"] = Math.Round(NewWritingCost * 15 / 115, 2).ToString(NbrHashNeerDecimal);
        r["UnitCost"] = Math.Round((NewWritingCost - NewWritingCost * 15 / 115) / Qty, 3).ToString(NbrHashNeerDecimal);
        r["UnitCostEvaluate"] = r["UnitCost"];
        //var txtItemCashDiscount = ((TextBox)gvItems.Rows[Index].FindControl("txtItemCashDiscount"));
        //txtItemCashDiscount.Text = r["CashDiscount"].ToExpressString().ToDecimalOrDefault().ToString(NbrHashNeerDecimal);
        var txtCost = ((TextBox)gvItems.Rows[Index].FindControl("txtCost"));
        txtCost.Text = Math.Round(r["UnitCost"].ToExpressString().ToDecimalOrDefault(), 2).ToString(NbrHashNeerDecimal);

        this.Calculate();
        CalulateRowTotals(Index, lblID.Text.ToIntOrDefault());
    }
    protected void gvGeneralJournalList_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            DataRow lastRow = this.dtItems.Rows[e.Row.RowIndex];


            var ddlUnit = (e.Row.FindControl("ddlUnit") as DropDownList);
            var lblItem_ID = (e.Row.FindControl("lblItem_ID") as Label);

            //  var acitemTxtBox = (e.Row.FindControl("txtb") as CustomControls_ucTextBox);

            if (lastRow["Item_ID"].ToIntOrDBNULL() is System.DBNull && e.Row.RowIndex == dtItems.Rows.Count - 1)
            {
                //acitemTxtBox.Visible = true;
            }
            else
            {

                // acitemTxtBox.Visible = false;

                if (ddlUnit != null)
                {
                    ddlUnit.DataSource = dtItemsUnit.Where(c => c.ID == lblItem_ID.Text.ToIntOrDefault());
                    ddlUnit.DataTextField = "UomName";
                    ddlUnit.DataValueField = "UOM_ID";
                    ddlUnit.DataBind();
                }

                var txtItem = (e.Row.FindControl("txtItem") as TextBox);

                //if (txtItem != null)
                //{
                //    txtItem.Visible = true;
                //}
                var txtCost = (e.Row.FindControl("txtCost") as TextBox);
                var txtQty = (e.Row.FindControl("txtQty") as TextBox);
                var txtItemPercentageDiscount = (e.Row.FindControl("txtItemPercentageDiscount") as TextBox);
                var txtItemCashDiscount = (e.Row.FindControl("txtItemCashDiscount") as TextBox);


                if (txtCost != null)
                {
                    var res = txtCost.Text.ToDecimalOrDefault().ToString("0.##");
                    txtCost.Text = res;
                } if (txtQty != null)
                {
                    var res = txtQty.Text.ToDecimalOrDefault().ToString("0.##");
                    txtQty.Text = res;
                } if (txtItemPercentageDiscount != null)
                {
                    var res = txtItemPercentageDiscount.Text.ToDecimalOrDefault().ToString("0.##");
                    txtItemPercentageDiscount.Text = res;
                } if (txtItemCashDiscount != null)
                {
                    var res = txtItemCashDiscount.Text.ToDecimalOrDefault().ToString("0.##");
                    txtItemCashDiscount.Text = res;
                }
            }
        }
    }
    protected void btnYes_click(object sender, EventArgs e)
    {
        try
        {
            this.ConfirmationAnswered = true;
            BtnApprove_Click(null, null);
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }
    protected void gvItemAdvanced_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        var txtUCItems = (e.Row.FindControl("txtUCItems") as TextBox);
        if (txtUCItems != null)
        {
            var res = txtUCItems.Text.ToDecimalOrDefault().ToString("0.##");

            txtUCItems.Text = res;
        }


    }
    protected void btnSave_Click(object sender, EventArgs e)
    {
        System.Data.Common.DbTransaction trans;
        dc.Connection.Open();
        trans = dc.Connection.BeginTransaction();
        dc.Transaction = trans;
        try
        {
            if (this.Save(false, trans))
            {
                trans.Commit();
                dc.SubmitChanges();
            }
        }
        catch (Exception ex)
        {
            trans.Rollback();
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }
    protected void BtnApprove_Click(object sender, EventArgs e)
    {
        System.Data.Common.DbTransaction trans;
        dc.Connection.Open();
        trans = dc.Connection.BeginTransaction();
        dc.Transaction = trans;
        try
        {
            if (this.Save(true, trans))
            {
                trans.Commit();
                dc.SubmitChanges();
            }
        }
        catch (Exception ex)
        {
            trans.Rollback();
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }
    #endregion

    protected void btnFastAddNew_click(object sender, EventArgs e)
    {
        System.Data.Common.DbTransaction trans;
        dc.Connection.Open();
        trans = dc.Connection.BeginTransaction();
        dc.Transaction = trans;
        try
        {
            var company = dc.usp_Company_Select().FirstOrDefault();

            int Contact_ID = dc.usp_ContactRax_Insert(MyContext.UserProfile.Branch_ID, ddlFastAddCurrency.SelectedValue.ToInt(), DocSerials.Customer.ToInt(), txtFastAddName.TrimmedText, 'C', string.Empty, null, txtTaxNumber.TrimmedText);
            int ChartofAccount_ID = dc.usp_ChartOfAccount_Insert(txtFastAddName.TrimmedText, txtFastAddName.TrimmedText, acParentAccount.Value.ToInt(), true, MyContext.UserProfile.Branch_ID, ddlFastAddCurrency.SelectedValue.ToInt(), null, null, null, null);

            if (ChartofAccount_ID == -2 || Contact_ID == -2)
            {
                UserMessages.Message(this.MyContext.PageData.PageTitle, Resources.UserInfoMessages.NameAlreadyExists, string.Empty);
                trans.Rollback();
                mpeFastAddNew.Show();
                return;
            }
            dc.usp_Customers_Insert(Contact_ID, ChartofAccount_ID, acArea.Value.ToNullableInt(), null, company.UseCustomerCreditLimit, company.CustomerCreditLimit);
            dc.usp_ContactDetails_insert(Contact_ID, 8, txtMobileNumner.Text.Trim());
            trans.Commit();
            if (acCustomer.Enabled) acCustomer.Value = Contact_ID.ToExpressString();
            LogAction(Actions.Add, "اضافة عميل سريع: " + txtFastAddName.TrimmedText, dc);
        }
        catch (Exception ex)
        {
            trans.Rollback();
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }
}
public class ItemsSelected
{
    public int ID { get; set; }
    public string Name { get; set; }
    public decimal Price { get; set; }
    public decimal Qty { get; set; }
    public int Uom_ID { get; set; }
    public string UomName { get; set; }
    public int Tax_ID { get; set; }
    public string TaxName { get; set; }
    public int OnInvoiceType { get; set; }
    public int OnReceiptType { get; set; }
    public int PurchaseAccountID { get; set; }
    public int SalesAccountID { get; set; }
    public decimal PercentageValue { get; set; }
    public string Barcode { get; set; }
}
public class ItemsUnitDDL
{
    public string UomName { get; set; }
    public int ID { get; set; }
    public int UOM_ID { get; set; }
    public int? Unit_ID { get; set; }
    public decimal? UPrice { get; set; }
    public decimal? Ratio { get; set; }
    public bool? IsFavorite { get; set; }

    public static List<ItemsUnitDDL> Mapped(List<usp_GetItemsUnitDllResult> lst)
    {
        List<ItemsUnitDDL> l = new List<ItemsUnitDDL>();
        foreach (var item in lst)
        {
            l.Add(new ItemsUnitDDL()
            {

                ID = item.ID.Value,
                UomName = item.UomName,
                Ratio = item.Ratio,
                UOM_ID = item.UOM_ID.Value,
                UPrice = item.UPrice,
            });
        }
        return l;
    }

}