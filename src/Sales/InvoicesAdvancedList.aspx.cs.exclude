using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using XPRESS.Common;
using System.Data;
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;
using System.Web.Script.Serialization;

public partial class Sales_InvoicesAdvancedList : UICulturePage
{
    XpressDataContext dc = new XpressDataContext();

    #region Session

    private DataTable dtInvoicesList
    {
        get
        {
            return (DataTable)Session["dtInvoicesList" + this.WinID];
        }

        set
        {
            Session["dtInvoicesList" + this.WinID] = value;
        }
    }

    #endregion

    #region ViewState

    private int Invoice_ID
    {
        get
        {
            if (ViewState["Invoice_ID"] == null) return 0;
            return (int)ViewState["Invoice_ID"];
        }

        set
        {
            ViewState["Invoice_ID"] = value;
        }
    }

    #endregion

    #region Page Events

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            if (!Page.IsPostBack)
            {
                if (!MyContext.PageData.IsViewList) Response.Redirect(PageLinks.Authorization, true);
                gvInvoicesList.Columns[8].Visible = this.MyContext.PageData.IsViewDoc;
                gvInvoicesList.Columns[9].Visible = this.MyContext.PageData.IsPrint;
                btnPrintList.Visible = this.MyContext.PageData.IsPrint;
                lnkadd.Visible = this.MyContext.PageData.IsAdd;
                this.LoadControls();
                this.FillInvoicesList();
                ScriptManager.RegisterStartupScript(this.Page, Page.GetType(), "OpenModalDialog", "<script type='text/javascript'>document.getElementById('" + lnkSearch.ClientID + "').scrollIntoView('cph_btnSearch');</script>", false);

            }
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void Page_PreRender(object sender, EventArgs e)
    {
        this.CustomPage();
    }

    #endregion

    #region Control Events

    protected void btnSearch_click(object sender, EventArgs e)
    {
        try
        {

            #region Set Saved Search
            InvoicesSearchable = new InvoiceListSearchable();
            InvoicesSearchable.acBranch = acBranch.Value.ToNullableInt();
            InvoicesSearchable.DocStatus = (ddlStatus.SelectedIndex == 0 ? (byte?)null : ddlStatus.SelectedValue.ToByte());
            InvoicesSearchable.FromDate = (txtDateFromSrch.Text.ToDate() == DateTime.MinValue ? null : txtDateFromSrch.Text.ToDate());
            InvoicesSearchable.ToDate = (txtDateToSrch.Text.ToDate() == DateTime.MinValue ? null : txtDateToSrch.Text.ToDate());

            #endregion


            this.FillInvoicesList();
            //ScriptManager.RegisterClientScriptBlock(this.Page, this.Page.GetType(), "ClickScript", "var elmnt = document.getElementById('cph_btnSearch'); elmnt.scrollIntoView('cph_btnSearch');", true);
            // ScriptManager.RegisterClientScriptBlock(this.Page, Page.GetType(), "OpenModalDialog", "<script type='text/javascript'>document.getElementById('" + btnSearch.ClientID + "').scrollIntoView('cph_btnSearch');</script>", false);

            ddlStatus.Focus();
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void btnClearSrch_Click(object sender, EventArgs e)
    {
        try
        {
            txtDateFromSrch.Clear();
            txtDateToSrch.Clear();
            ddlCurrency.SelectedIndex = 0;
            txtSerialsrch.Clear();
            txtUserRefNo.Clear();
            ddlStatus.SelectedIndex = 0;
            ddlIsHasBill.SelectedIndex = 0;
            if (acBranch.Enabled) acBranch.Clear();
            acCustomerName.Clear();
            this.FilterCustomers(null, null);
            this.FillInvoicesList();
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void FilterCustomers(object sender, EventArgs e)
    {
        try
        {
            acCustomerName.ContextKey = "C," + acBranch.Value + "," + (ddlCurrency.SelectedIndex == 0 ? string.Empty : ddlCurrency.SelectedValue) + ",";
            if (sender != null) this.FocusNextControl(sender);
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void gvInvoicesList_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        try
        {
            gvInvoicesList.PageIndex = e.NewPageIndex;
            gvInvoicesList.DataSource = this.dtInvoicesList;
            gvInvoicesList.DataBind();
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void gvInvoicesList_SelectedIndexChanging(object sender, GridViewSelectEventArgs e)
    {
        try
        {
            int result = dc.usp_Customers_Delete(gvInvoicesList.DataKeys[e.NewSelectedIndex]["ID"].ToInt());

        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }
    private int IndexSelected
    {
        get
        {
            if (ViewState["IndexSelected"] == null) return 0;
            return (int)ViewState["IndexSelected"];
        }

        set
        {
            ViewState["IndexSelected"] = value;
        }
    }


    private int? RelatedDoc_ID
    {
        get
        {
            if (ViewState["RelatedDoc_ID"] == null) return null;
            return (int?)ViewState["RelatedDoc_ID"];
        }

        set
        {
            ViewState["RelatedDoc_ID"] = value;
        }
    }

    private int? RelatedDocTableType_ID
    {
        get
        {
            if (ViewState["RelatedDocumentTableType_ID"] == null) return null;
            return (int?)ViewState["RelatedDocumentTableType_ID"];
        }

        set
        {
            ViewState["RelatedDocumentTableType_ID"] = value;
        }
    }


    protected void lnkCollect_Click(object sender, EventArgs e)
    {


        #region New Code

        try
        {
            int Index = ((GridViewRow)((LinkButton)sender).Parent.Parent).RowIndex;
            IndexSelected = Index;
            if (Math.Abs(gvInvoicesList.DataKeys[Index]["CollectedAmount"].ToDecimal() - gvInvoicesList.DataKeys[Index]["GrossTotalAmount"].ToDecimal()) < 0.0001m)
            {
                UserMessages.Message("تحصيل الفاتورة قد اكتمل");
                return;
            }

            this.Invoice_ID = gvInvoicesList.DataKeys[Index]["ID"].ToInt();
            lblInvoiceSerial.Text = gvInvoicesList.DataKeys[Index]["Serial"].ToExpressString();
            lblCollected.Text = gvInvoicesList.DataKeys[Index]["CollectedAmount"].ToExpressString();
            lblGrossTotal.Text = gvInvoicesList.DataKeys[Index]["GrossTotalAmount"].ToExpressString();

            var invoice = dc.usp_Invoice_SelectByID(this.Invoice_ID).FirstOrDefault();
            var iddd = dc.fun_getContactAccountID(invoice.Contact_ID).Value.ToExpressString();
            iddd = dc.fun_getContactAccountID(invoice.Contact_ID).Value.ToExpressString();



            acCreditAccount.ContextKey = this.MyContext.CurrentCulture.ToByte().ToExpressString() + "," + iddd;

            acCreditAccount.Value = iddd;

            var invoiceAmountRest =
                Math.Abs(gvInvoicesList.DataKeys[Index]["CollectedAmount"].ToDecimal() -
                         gvInvoicesList.DataKeys[Index]["GrossTotalAmount"].ToDecimal());

            lblDebitBalance.Text = dc.fun_GetAccountBalanceInForeign(COA.CashOnHand.ToInt(), txtOperationDate.Text.ToDate(), acBranch.Value.ToNullableInt()).Value.ToExpressString();

            lblCreditBalance.Text = invoiceAmountRest.ToString("0.##");
            txtVisa.Text = "";
            txtMaster.Text = "";
            txtAtm.Text = "";
            txtBalanceNow.Text = "";
            acCreditAccount.Enabled = false;

            if (this.MyContext.UserProfile.Branch_ID != null)
            {
                acBranchPayment.Value = invoice.Branch_ID.ToExpressString();
                acBranchPayment.Enabled = false;
            }
            else
            {
                try
                {
                    acBranchPayment.Value = invoice.Branch_ID.ToExpressString();

                    acBranchPayment.Enabled = false;
                }
                catch
                {

                }
            }
            this.RelatedDoc_ID = Invoice_ID.ToInt();
            this.RelatedDocTableType_ID = 1;
            mpePayment.Show();
            btnApprove.Visible = true;

        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }

        #endregion




        #region Old Code

        //try
        //{
        //    int Index = ((GridViewRow)((LinkButton)sender).Parent.Parent).RowIndex;
        //    this.Invoice_ID = gvInvoicesList.DataKeys[Index]["ID"].ToInt();
        //    lblInvoiceSerial.Text = gvInvoicesList.DataKeys[Index]["Serial"].ToExpressString();
        //    lblCollected.Text = gvInvoicesList.DataKeys[Index]["CollectedAmount"].ToExpressString();
        //    lblGrossTotal.Text = gvInvoicesList.DataKeys[Index]["GrossTotalAmount"].ToExpressString();
        //    mpeCollect.Show();
        //}
        //catch (Exception ex)
        //{
        //    Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        //} 
        #endregion




    }

    protected void ClosePopup_Click(object sender, EventArgs e)
    {
        try
        {
            mpeCollect.Hide();
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void btnOkCollect_click(object sender, EventArgs e)
    {
        try
        {
            Response.Redirect(ddlCollectWith.SelectedValue + "?RelatedDocTableType_ID=1&RelatedDoc_ID=" + Invoice_ID.ToExpressString(), false);
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void btnPrint_Click(object sender, EventArgs e)
    {
        try
        {
            string SaveName = Request.PathInfo == "/Invoice" ? "Invoice" : "SalesOrder";
            int Index = ((GridViewRow)((ImageButton)sender).Parent.Parent).RowIndex;
            this.Invoice_ID = gvInvoicesList.DataKeys[Index]["ID"].ToInt();
            int? Branch_ID = gvInvoicesList.DataKeys[Index]["Branch_ID"].ToNullableInt();

            ReportDocument doc = new ReportDocument();
            doc.Load(Server.MapPath("~\\Reports\\Invoice_Print ssb.rpt"));
            doc.SetParameterValue("@Invoice_ID", this.Invoice_ID);

            //doc.SetParameterValue("BaseDir", HttpContext.Current.Server.MapPath("~\\Uploads\\"));
            //doc.SetParameterValue("ByEmp", ((UICulturePage)HttpContext.Current.Handler).MyContext.UserProfile.EmployeeName);
            //doc.SetParameterValue("@Branch_ID", acBranch.Value.ToNullableInt());



            //ReportDocument doc = new ReportDocument();

            //doc.Load(Server.MapPath("~\\Reports\\InvoicePrint.rpt"));
            //doc.SetParameterValue("@Invoice_ID", this.Invoice_ID);
            //doc.SetParameterValue("@DocTableType_ID", DocumentsTableTypes.Invoice.ToInt(), "DocumentTaxes.rpt");
            //doc.SetParameterValue("@Doc_ID", this.Invoice_ID, "DocumentTaxes.rpt");
            //doc.SetParameterValue("@IsReturn", false, "DocumentTaxes.rpt");
            //doc.SetParameterValue("BaseDir", HttpContext.Current.Server.MapPath("~\\Uploads\\"));
            //doc.SetParameterValue("ByEmp", ((UICulturePage)HttpContext.Current.Handler).MyContext.UserProfile.EmployeeName);
            // doc.SetParameterValue("@Branch_ID", acBranch.Value.ToNullableInt());
            Response.Redirect(PageLinks.Print + "?File=" + doc.ExportToPDF(acBranch.Value.ToNullableInt(), "Invoice"), false);
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void btnPrintList_Click(object sender, EventArgs e)
    {
        try
        {
            int? Currency_ID = ddlCurrency.SelectedIndex == 0 ? (int?)null : ddlCurrency.SelectedValue.ToInt();
            byte? DocStatus_ID = ddlStatus.SelectedIndex == 0 ? (byte?)null : ddlStatus.SelectedValue.ToByte();
            bool? HasInvoice = ddlIsHasBill.SelectedIndex == 0 ? (bool?)null : ddlIsHasBill.SelectedValue.ToBoolean();

            ReportDocument doc = new ReportDocument();
            doc.Load(Server.MapPath("~\\Reports\\InvoiceList_Print.rpt"));
            doc.SetParameterValue("@Branch_ID", acBranch.Value.ToNullableInt());
            doc.SetParameterValue("@Currency_ID", Currency_ID);
            doc.SetParameterValue("@Serial", txtSerialsrch.Text);
            doc.SetParameterValue("@Contact_ID", acCustomerName.Value.ToNullableInt());
            doc.SetParameterValue("@FromDate", txtDateFromSrch.Text.ToDate());
            doc.SetParameterValue("@ToDate", txtDateToSrch.Text.ToDate());
            doc.SetParameterValue("@UserRefNo", txtUserRefNo.Text);
            doc.SetParameterValue("@DocStatus_ID", DocStatus_ID);
            doc.SetParameterValue("@Culture", MyContext.CurrentCulture.ToByte());
            doc.SetParameterValue("@HasInvoice", HasInvoice);
            doc.SetParameterValue("@EntryType", 2);
            doc.SetParameterValue("BaseDir", HttpContext.Current.Server.MapPath("~\\Uploads\\"));
            doc.SetParameterValue("ByEmp", MyContext.UserProfile.EmployeeName);


            doc.SetParameterValue("@DocTableType_ID", DocumentsTableTypes.Invoice.ToInt(), "DocumentTaxes.rpt");
            //doc.SetParameterValue("@Doc_ID", this.Invoice_ID, "DocumentTaxes.rpt");
            doc.SetParameterValue("@IsReturn", false, "DocumentTaxes.rpt");
            Response.Redirect(PageLinks.Print + "?File=" + doc.ExportToPDF(null, "InvoiceList"), false);
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    #endregion

    #region Private Methods

    private void FillInvoicesList()
    {
        byte EntryType = Request.PathInfo == "/Invoice" ? (byte)2 : (byte)0;
        lnkadd.NavigateUrl = Request.PathInfo == "/Invoice" ? PageLinks.InvoiceShortcut : PageLinks.SalesOrder;
        gvInvoicesList.Columns[10].Visible = Request.PathInfo != "/Invoice";
        gvInvoicesList.Columns[11].Visible = Request.PathInfo == "/Invoice";
        gvInvoicesList.Columns[12].Visible = Request.PathInfo == "/Invoice";
        divHasBill.Visible = Request.PathInfo != "/Invoice";
        btnPrintList.Visible = Request.PathInfo == "/Invoice" && MyContext.PageData.IsPrint;
        int? Currency_ID = ddlCurrency.SelectedIndex == 0 ? (int?)null : ddlCurrency.SelectedValue.ToInt();
        byte? DocStatus_ID = ddlStatus.SelectedIndex == 0 ? (byte?)null : ddlStatus.SelectedValue.ToByte();
        bool? HasInvoice = ddlIsHasBill.SelectedIndex == 0 ? (bool?)null : ddlIsHasBill.SelectedValue.ToBoolean();
        int? CollectType = ddlCollect.SelectedValue.ToInt();


        #region save Search
        //List<string> s = new List<string>();

        //string ret = LoggerNavigation.GetLogNav(MyContext.UserProfile.Contact_ID);
        //var js = new JavaScriptSerializer();
        //if (ret != Environment.NewLine && ret != string.Empty)
        //{
        //    var lt = js.Deserialize<List<InvoiceListSearchable>>(ret).ToList();

        //    var list = lt.Where(x => x.Page_ID == MyContext.PageData.PageID && x.UserID == MyContext.UserProfile.Contact_ID);

        //    if (lt != null && lt.Any())
        //    {
        //        var objectNav = list.FirstOrDefault();
        //        if (objectNav != null)
        //        {
        //            if (InvoicesSearchable == null)
        //            {
        //                if (objectNav.acBranch != null) acBranch.Value = objectNav.acBranch.ToExpressString();
        //                if (objectNav.DocStatus != null) { DocStatus_ID = objectNav.DocStatus.ToByteOrDefault(); ddlStatus.SelectedValue = objectNav.DocStatus.ToExpressString(); }
        //                if (objectNav.FromDate != null) { txtDateFromSrch.Text = (objectNav.FromDate != null ? objectNav.FromDate.Value.ToLocalTime().ToExpressString() : string.Empty); }
        //                if (objectNav.ToDate != null) { txtDateToSrch.Text = (objectNav.ToDate != null ? objectNav.ToDate.Value.ToLocalTime().ToExpressString() : string.Empty); }
        //            }
        //            else
        //            {
        //                if (InvoicesSearchable.acBranch != null) acBranch.Value = InvoicesSearchable.acBranch.ToExpressString();
        //                if (InvoicesSearchable.DocStatus != null) DocStatus_ID = InvoicesSearchable.DocStatus.ToByteOrDefault();
        //                if (InvoicesSearchable.FromDate != null) txtDateFromSrch.Text = (InvoicesSearchable.FromDate == DateTime.MinValue ? null : InvoicesSearchable.FromDate.ToExpressString());
        //                if (InvoicesSearchable.ToDate != null) txtDateToSrch.Text = (InvoicesSearchable.ToDate == DateTime.MinValue ? null : InvoicesSearchable.ToDate.ToExpressString());
        //                if (!list.Any())
        //                {
        //                    lt.Add(new InvoiceListSearchable()
        //                    {
        //                        acBranch = InvoicesSearchable.acBranch.ToNullableInt(),
        //                        DocStatus = InvoicesSearchable.DocStatus.ToByteOrDefault(),
        //                        FromDate = (InvoicesSearchable.FromDate == DateTime.MinValue ? null : InvoicesSearchable.FromDate.ToDate()),
        //                        ToDate = (InvoicesSearchable.ToDate == DateTime.MinValue ? null : InvoicesSearchable.ToDate.ToDate()),
        //                        Page_ID = MyContext.PageData.PageID,
        //                        UserID = MyContext.UserProfile.Contact_ID
        //                    });
        //                }
        //                else
        //                {
        //                    var xx = lt.Where(x => x.Page_ID == MyContext.PageData.PageID).FirstOrDefault();
        //                    lt.Remove(xx);
        //                    lt.Add(new InvoiceListSearchable()
        //                    {
        //                        acBranch = InvoicesSearchable.acBranch.ToNullableInt(),
        //                        DocStatus = InvoicesSearchable.DocStatus.ToByteOrDefault(),
        //                        FromDate = (InvoicesSearchable.FromDate == DateTime.MinValue ? null : InvoicesSearchable.FromDate.ToDate()),
        //                        ToDate = (InvoicesSearchable.ToDate == DateTime.MinValue ? null : InvoicesSearchable.ToDate.ToDate()),
        //                        Page_ID = MyContext.PageData.PageID,
        //                        UserID = MyContext.UserProfile.Contact_ID
        //                    });
        //                }
        //            }
        //        }

        //        if (!list.Any() && InvoicesSearchable != null)
        //        {

        //            lt.Add(new InvoiceListSearchable()
        //            {
        //                acBranch = InvoicesSearchable.acBranch.ToNullableInt(),
        //                DocStatus = InvoicesSearchable.DocStatus.ToByteOrDefault(),
        //                FromDate = (InvoicesSearchable.FromDate == DateTime.MinValue ? null : InvoicesSearchable.FromDate.ToDate()),
        //                ToDate = (InvoicesSearchable.ToDate == DateTime.MinValue ? null : InvoicesSearchable.ToDate.ToDate()),
        //                Page_ID = MyContext.PageData.PageID,
        //                UserID = MyContext.UserProfile.Contact_ID
        //            });
        //        }

        //        foreach (var item in lt)
        //        {
        //            s.Add(js.Serialize(new InvoiceListSearchable()
        //            {
        //                acBranch = item.acBranch.ToNullableInt(),
        //                DocStatus = item.DocStatus,
        //                FromDate = item.FromDate != null ? item.FromDate.Value.ToLocalTime() : (DateTime?)null,
        //                ToDate = item.ToDate != null ? item.ToDate.Value.ToLocalTime() : (DateTime?)null,
        //                Page_ID = item.Page_ID,
        //                UserID = item.UserID
        //            }));
        //        }
        //        LoggerNavigation.LogNav(s, MyContext.UserProfile.Contact_ID);
        //    }
        //}
        //else
        //{
        //    if (InvoicesSearchable != null)
        //        s.Add(js.Serialize(new InvoiceListSearchable()
        //        {
        //            acBranch = InvoicesSearchable.acBranch.ToNullableInt(),
        //            DocStatus = InvoicesSearchable.DocStatus.ToByteOrDefault(),
        //            FromDate = (InvoicesSearchable.FromDate == DateTime.MinValue ? null : InvoicesSearchable.FromDate.ToDate()),
        //            ToDate = (InvoicesSearchable.ToDate == DateTime.MinValue ? null : InvoicesSearchable.ToDate.ToDate()),
        //            Page_ID = MyContext.PageData.PageID,
        //            UserID = MyContext.UserProfile.Contact_ID
        //        }));
        //    LoggerNavigation.LogNav(s, MyContext.UserProfile.Contact_ID);
        //}


        #endregion


        var lstInvoices =
            dc.usp_InvoiceRep_Select(acBranch.Value.ToNullableInt(), Currency_ID, txtSerialsrch.TrimmedText,
                acCustomerName.Value.ToNullableInt(), txtDateFromSrch.Text.ToDate(), txtDateToSrch.Text.ToDate(),
                txtUserRefNo.Text, DocStatus_ID, MyContext.CurrentCulture.ToByte(),
                HasInvoice, EntryType, CollectType,
                (MyContext.UserProfile.HasPermissionShow == false ? (int?)null : MyContext.UserProfile.Contact_ID),
                acnameEmp.Value.ToNullableInt(), string.Empty, string.Empty, string.Empty, 0,null).ToList().Where(x => x.IsPos == null);
        foreach (var item in lstInvoices)
        {

            item.PageName = item.PageName.Replace("Invoice", "InvoiceAdvanced");
            item.ToInvoicePage = item.ToInvoicePage.Replace("Invoice", "InvoiceAdvanced");
        }
        this.dtInvoicesList = lstInvoices.CopyToDataTable();

        gvInvoicesList.DataSource = this.dtInvoicesList;
        gvInvoicesList.DataBind();
    }

    private void LoadControls()
    {
        acBranch.ContextKey = string.Empty;
        acBranchPayment.ContextKey = string.Empty;

        acnameEmp.ContextKey = ",,";
        if (this.MyContext.UserProfile.Branch_ID != null)
        {
            acBranch.Value = this.MyContext.UserProfile.Branch_ID.ToExpressString();
            acBranch.Enabled = false;
        }
        ddlCurrency.DataSource = dc.usp_Currency_Select(false);
        ddlCurrency.DataTextField = "Name";
        ddlCurrency.DataValueField = "ID";
        ddlCurrency.DataBind();
        ddlCurrency.Items.Insert(0, new ListItem(Resources.Labels.Select, "-1"));
        this.FilterCustomers(null, null);
    }

    private void CustomPage()
    {
        acBranch.Visible = MyContext.Features.BranchesEnabled;

        foreach (DataControlField col in gvInvoicesList.Columns)
        {
            if (col.ItemStyle.CssClass == "BranchCol") col.Visible = MyContext.Features.BranchesEnabled;
        }
    }




    public bool GetTypeCollect(string status, decimal gross, decimal total)
    {
        if ((status == "2" && gross > total) || gross == 0)
        {
            return true;
        } return false;
    }


    public string GetTypeCado(string status, decimal gross, decimal total)
    {
        if (status == "2" && gross > total)
        {
            return Resources.Labels.Collect;
        }
        return "هدية";
    }



    #endregion



    #region Pay

    List<PaymentsOperationDetail> OperationDetailsList = new List<PaymentsOperationDetail>();

    private int Payment_ID
    {
        get
        {
            if (ViewState["Payment_ID"] == null) return 0;
            return (int)ViewState["Payment_ID"];
        }

        set
        {
            ViewState["Payment_ID"] = value;
        }
    }
    private bool EditMode
    {
        get
        {
            if (ViewState["EditMode"] == null) return false;
            return (bool)ViewState["EditMode"];
        }

        set
        {
            ViewState["EditMode"] = value;
        }
    }
    private DataTable dtPaymentDetails
    {
        get
        {
            if (Session["dtPaymentDetails" + this.WinID] == null)
            {
                Session["dtPaymentDetails" + this.WinID] = dc.usp_PaymentsDetails_Select(null, 0).CopyToDataTable();
            }
            return (DataTable)Session["dtPaymentDetails" + this.WinID];
        }

        set
        {
            Session["dtPaymentDetails" + this.WinID] = value;
        }
    }
    private int OperationType_ID
    {
        get
        {
            if (ViewState["OperationType_ID"] == null) return 0;
            return (int)ViewState["OperationType_ID"];
        }

        set
        {
            ViewState["OperationType_ID"] = value;
        }
    }
    private string ConfirmationMessage
    {
        get
        {
            if (ViewState["ConfirmationMessage"] == null)
            {
                ViewState["ConfirmationMessage"] = string.Empty;
            }
            return (string)ViewState["ConfirmationMessage"];
        }

        set
        {
            ViewState["ConfirmationMessage"] = value;
        }
    }
    private bool ConfirmationAnswered
    {
        get
        {
            if (ViewState["ConfirmationAnswered"] == null) return false;
            return (bool)ViewState["ConfirmationAnswered"];
        }

        set
        {
            ViewState["ConfirmationAnswered"] = value;
        }
    }
    private string DocRandomString
    {
        get
        {
            if (ViewState["DocRandomString"] == null)
            {
                ViewState["DocRandomString"] = DateTime.Now.Ticks.ToExpressString() + "_" + Guid.NewGuid().ToExpressString();
            }
            return (string)ViewState["DocRandomString"];
        }

        set
        {
            ViewState["DocRandomString"] = value;
        }
    }

    private decimal Total
    {
        get
        {
            if (ViewState["Total"] == null) return 0;
            return (decimal)ViewState["Total"];
        }

        set
        {
            ViewState["Total"] = value;
        }
    }
    private bool Save(bool IsApproving, System.Data.Common.DbTransaction trans)
    {
        OperationDetailsList.Clear();
        string Serial = string.Empty;
        byte DocStatus_ID = IsApproving ? DocStatus.Approved.ToByte() : DocStatus.Current.ToByte();
        DateTime? ApproveDate = IsApproving ? DateTime.Now : (DateTime?)null;
        int? approvedBY_ID = IsApproving ? MyContext.UserProfile.Contact_ID : (int?)null;
        var brnID = int.Parse(acBranchPayment.Value);
        var lst = dc.PaymentMethodes.Where(x => x.Branch_ID == brnID).ToList();
        if (!lst.Any())
        {
            UserMessages.Message(null, "إعدادات حسابات غير معرفة", string.Empty);
            return false;
        }
        // btnPrintPay.Enabled = false;
        //btnInvoicePrintWithoutItems.Enabled = false;
        var objPm = lst.First();

        var DebitAccount_Atm_ID = objPm.Account_Atm_Id;
        var DebitAccount_Master_ID = objPm.Account_Master_Id;
        var DebitAccount_Visa_ID = objPm.Account_Visa_Id;
        var DebitAccount_Treasury_ID = objPm.Account_Treasury_Id;
        if (MyContext.UserProfile.CashierAccount_ID > 0)
        {
            DebitAccount_Treasury_ID = MyContext.UserProfile.CashierAccount_ID;
        }

        if (DebitAccount_Atm_ID == null || DebitAccount_Master_ID == null || DebitAccount_Visa_ID == null || DebitAccount_Treasury_ID == null)
        {
            UserMessages.Message(null, "إعدادات حسابات الدفع غير مكتملة", string.Empty);
            return false;
        }


        var creditAccount = acCreditAccount.Value.ToInt();
        if (creditAccount == null || creditAccount == 0)
        {
            UserMessages.Message(null, "حساب العميل غير موجود", string.Empty);
            return false;
        }


        if (!this.EditMode)
        {
            this.Total = txtAtm.Text.ToDecimalOrDefault() + txtMaster.Text.ToDecimalOrDefault() + txtVisa.Text.ToDecimalOrDefault() +
                         txtBalanceNow.Text.ToDecimalOrDefault();
            ViewState["DocRandomString"] = DateTime.Now.Ticks.ToExpressString() + "_" + Guid.NewGuid().ToExpressString();
            this.Payment_ID = dc.usp_Payments_Insert(txtOperationDate.Text.ToDate(), DateTime.Now, MyContext.UserProfile.Contact_ID, approvedBY_ID, ApproveDate, txtUserRefNo.TrimmedText, ref Serial, DocSerials.CashIn.ToInt(), "", this.Total, null, DocStatus_ID, PaymentsTypes.CashInCustomer.ToByte(), acBranch.Value.ToNullableInt(), 1, 15, this.RelatedDoc_ID, this.RelatedDocTableType_ID, this.DocRandomString);
            if (this.Payment_ID > 0)
            {
                if (this.Payment_ID == null || this.Payment_ID == 0)
                {
                    UserMessages.Message(null, "العملية فشلت أرجو الاعادة", string.Empty);
                    return false;
                }


                if (txtAtm.Text.ToDecimalOrDefault() > 0) dc.usp_PaymentsDetails_Insert(this.Payment_ID, DebitAccount_Atm_ID, creditAccount, txtAtm.Text.ToDecimalOrDefault(), null, "", null);
                if (txtMaster.Text.ToDecimalOrDefault() > 0) dc.usp_PaymentsDetails_Insert(this.Payment_ID, DebitAccount_Master_ID, creditAccount, txtMaster.Text.ToDecimalOrDefault(), null, "", null);
                if (txtVisa.Text.ToDecimalOrDefault() > 0) dc.usp_PaymentsDetails_Insert(this.Payment_ID, DebitAccount_Visa_ID, creditAccount, txtVisa.Text.ToDecimalOrDefault(), null, "", null);
                if (txtBalanceNow.Text.ToDecimalOrDefault() > 0) dc.usp_PaymentsDetails_Insert(this.Payment_ID, DebitAccount_Treasury_ID, creditAccount, txtBalanceNow.Text.ToDecimalOrDefault(), null, "", null);
                if (IsApproving)
                {

                    if (txtAtm.Text.ToDecimalOrDefault() > 0)
                        OperationDetailsList.Add(new PaymentsOperationDetail()
                        {
                            AccountName = dc.ChartOfAccounts.Where(x => x.ID == DebitAccount_Atm_ID).FirstOrDefault().Name,
                            Account_ID = DebitAccount_Atm_ID,
                            DebitAmount = txtAtm.Text.ToDecimalOrDefault(),
                            CreditAmount = 0,
                            CostCenter_ID = null,
                            Notes = ""
                        });
                    if (txtAtm.Text.ToDecimalOrDefault() > 0)
                        OperationDetailsList.Add(new PaymentsOperationDetail()
                        {
                            AccountName = dc.ChartOfAccounts.Where(x => x.ID == creditAccount).FirstOrDefault().Name,
                            Account_ID = creditAccount,
                            DebitAmount = 0,
                            CreditAmount = txtAtm.Text.ToDecimalOrDefault(),
                            CostCenter_ID = null, // Note This Null to prevent dubplicate
                            Notes = null
                        });

                    if (txtMaster.Text.ToDecimalOrDefault() > 0)
                        OperationDetailsList.Add(new PaymentsOperationDetail()
                        {
                            AccountName =
                                dc.ChartOfAccounts.Where(x => x.ID == DebitAccount_Master_ID).FirstOrDefault().Name,
                            Account_ID = DebitAccount_Master_ID,
                            DebitAmount = txtMaster.Text.ToDecimalOrDefault(),
                            CreditAmount = 0,
                            CostCenter_ID = null,
                            Notes = ""
                        });
                    if (txtMaster.Text.ToDecimalOrDefault() > 0)
                        OperationDetailsList.Add(new PaymentsOperationDetail()
                        {
                            AccountName = dc.ChartOfAccounts.Where(x => x.ID == creditAccount).FirstOrDefault().Name,
                            Account_ID = creditAccount,
                            DebitAmount = 0,
                            CreditAmount = txtMaster.Text.ToDecimalOrDefault(),
                            CostCenter_ID = null, // Note This Null to prevent dubplicate
                            Notes = null
                        });
                    if (txtVisa.Text.ToDecimalOrDefault() > 0)
                        OperationDetailsList.Add(new PaymentsOperationDetail()
                        {
                            AccountName =
                                dc.ChartOfAccounts.Where(x => x.ID == DebitAccount_Visa_ID).FirstOrDefault().Name,
                            Account_ID = DebitAccount_Visa_ID,
                            DebitAmount = txtVisa.Text.ToDecimalOrDefault(),
                            CreditAmount = 0,
                            CostCenter_ID = null,
                            Notes = ""
                        });
                    if (txtVisa.Text.ToDecimalOrDefault() > 0)
                        OperationDetailsList.Add(new PaymentsOperationDetail()
                        {
                            AccountName = dc.ChartOfAccounts.Where(x => x.ID == creditAccount).FirstOrDefault().Name,
                            Account_ID = creditAccount,
                            DebitAmount = 0,
                            CreditAmount = txtVisa.Text.ToDecimalOrDefault(),
                            CostCenter_ID = null, // Note This Null to prevent dubplicate
                            Notes = null
                        });

                    if (txtBalanceNow.Text.ToDecimalOrDefault() > 0)
                        OperationDetailsList.Add(new PaymentsOperationDetail()
                        {
                            AccountName =
                                dc.ChartOfAccounts.Where(x => x.ID == DebitAccount_Treasury_ID).FirstOrDefault().Name,
                            Account_ID = DebitAccount_Treasury_ID,
                            DebitAmount = txtBalanceNow.Text.ToDecimalOrDefault(),
                            CreditAmount = 0,
                            CostCenter_ID = null,
                            Notes = ""
                        });
                    if (txtBalanceNow.Text.ToDecimalOrDefault() > 0)
                        OperationDetailsList.Add(new PaymentsOperationDetail()
                        {
                            AccountName = dc.ChartOfAccounts.Where(x => x.ID == creditAccount).FirstOrDefault().Name,
                            Account_ID = creditAccount,
                            DebitAmount = 0,
                            CreditAmount = txtBalanceNow.Text.ToDecimalOrDefault(),
                            CostCenter_ID = null, // Note This Null to prevent dubplicate
                            Notes = null
                        });

                }
                if (IsApproving) InsertOperation();
                LogAction(IsApproving ? Actions.Approve : Actions.Add, Serial, dc);
            }
        }
        else
        {
            int Result = dc.usp_Payments_Update(this.Payment_ID, txtOperationDate.Text.ToDate(), approvedBY_ID, ApproveDate, txtUserRefNo.TrimmedText, ref Serial, null, "", this.Total, null, DocStatus_ID, acBranch.Value.ToNullableInt(), 1, ddlCurrency.SelectedValue.ToInt());
            if (Result > 0)
            {

                if (IsApproving)
                {
                    OperationDetailsList.Add(new PaymentsOperationDetail()
                    {
                        AccountName = dc.ChartOfAccounts.Where(x => x.ID == DebitAccount_Atm_ID).FirstOrDefault().Name,
                        Account_ID = DebitAccount_Atm_ID,
                        DebitAmount = txtAtm.ToDecimal(),
                        CreditAmount = 0,
                        CostCenter_ID = null,
                        Notes = ""
                    });
                    OperationDetailsList.Add(new PaymentsOperationDetail()
                    {
                        AccountName = dc.ChartOfAccounts.Where(x => x.ID == creditAccount).FirstOrDefault().Name,
                        Account_ID = creditAccount,
                        DebitAmount = 0,
                        CreditAmount = txtAtm.ToDecimal(),
                        CostCenter_ID = null, // Note This Null to prevent dubplicate
                        Notes = null
                    });


                    OperationDetailsList.Add(new PaymentsOperationDetail()
                    {
                        AccountName =
                            dc.ChartOfAccounts.Where(x => x.ID == DebitAccount_Master_ID).FirstOrDefault().Name,
                        Account_ID = DebitAccount_Master_ID,
                        DebitAmount = txtMaster.ToDecimal(),
                        CreditAmount = 0,
                        CostCenter_ID = null,
                        Notes = ""
                    });
                    OperationDetailsList.Add(new PaymentsOperationDetail()
                    {
                        AccountName = dc.ChartOfAccounts.Where(x => x.ID == creditAccount).FirstOrDefault().Name,
                        Account_ID = creditAccount,
                        DebitAmount = 0,
                        CreditAmount = txtMaster.ToDecimal(),
                        CostCenter_ID = null, // Note This Null to prevent dubplicate
                        Notes = null
                    });

                    OperationDetailsList.Add(new PaymentsOperationDetail()
                    {
                        AccountName =
                            dc.ChartOfAccounts.Where(x => x.ID == DebitAccount_Visa_ID).FirstOrDefault().Name,
                        Account_ID = DebitAccount_Visa_ID,
                        DebitAmount = txtVisa.ToDecimal(),
                        CreditAmount = 0,
                        CostCenter_ID = null,
                        Notes = ""
                    });
                    OperationDetailsList.Add(new PaymentsOperationDetail()
                    {
                        AccountName = dc.ChartOfAccounts.Where(x => x.ID == creditAccount).FirstOrDefault().Name,
                        Account_ID = creditAccount,
                        DebitAmount = 0,
                        CreditAmount = txtVisa.ToDecimal(),
                        CostCenter_ID = null, // Note This Null to prevent dubplicate
                        Notes = null
                    });
                }
                // }

                if (IsApproving) InsertOperation();
                LogAction(IsApproving ? Actions.Approve : Actions.Edit, "Error Serial", dc);
            }
        }
        if (this.ConfirmationMessage != string.Empty)
        {

            mpePayment.Show();
            trans.Rollback();
            return false;
        }
        Serial = Serial == string.Empty ? string.Empty : " (" + Serial + ") ";
        UserMessages.Message(string.Empty, Resources.UserInfoMessages.OperationSuccess, string.Empty);
        return true;
    }
    private void InsertOperation()
    {
        if (OperationDetailsList.Count == 0) return;
        decimal ratio = 1;
        string serial = string.Empty;

        int Result = dc.usp_Operation_Insert(acBranchPayment.Value.ToNullableInt(), txtOperationDate.Text.ToDate(), ref serial, DocStatus.Approved.ToByte(), OperationTypes.CashIn.ToInt(), 15, this.Total * ratio, this.Total, ratio, "");

        var GroupedOperationDetails = from OperationDetails in this.OperationDetailsList
                                      group OperationDetails by new { OperationDetails.Account_ID, OperationDetails.AccountName, IsDebit = (OperationDetails.CreditAmount == 0), OperationDetails.Notes } into groupedDetails
                                      select new { Key = groupedDetails.Key, DebitAmount = groupedDetails.Sum(x => x.DebitAmount), CreditAmount = groupedDetails.Sum(x => x.CreditAmount) };

        foreach (var Detail in GroupedOperationDetails)
        {
            if ((this.OperationType_ID == OperationTypes.CashOut.ToInt() || this.OperationType_ID == OperationTypes.BankWithdraw.ToInt()) && !this.ConfirmationAnswered)
            {
                if (Detail.CreditAmount > 0 && Detail.CreditAmount > dc.fun_GetAccountBalanceInForeign(Detail.Key.Account_ID, txtOperationDate.Text.ToDate(), acBranch.Value.ToNullableInt()).Value)
                {
                    this.ConfirmationMessage += "<br> \u2022 " + Resources.UserInfoMessages.BalanceNotEnough + " (" + Detail.Key.AccountName + ")";
                }
            }
            dc.usp_OperationDetails_Insert(Result, Detail.Key.Account_ID, Detail.DebitAmount * ratio, Detail.CreditAmount * ratio, Detail.DebitAmount, Detail.CreditAmount, Detail.Key.Notes, this.Payment_ID, DocumentsTableTypes.Payment_CashIn.ToInt());
        }

        //CostCenter
        foreach (var Detail in OperationDetailsList)
        {
            dc.usp_CostCenterOperation_Insert(acBranch.Value.ToNullableInt(), Detail.CostCenter_ID, txtOperationDate.Text.ToDate(), (Detail.DebitAmount + Detail.CreditAmount) * ratio, this.Payment_ID, DocumentsTableTypes.Payment_CashIn.ToInt(), Detail.Notes);
        }
        // dc.usp_CostCenterOperation_Insert(acBranch.Value.ToNullableInt(), null, txtOperationDate.Text.ToDate(), this.Total * ratio, this.Payment_ID, DocumentsTableTypes.Payment_CashIn.ToInt(), "");
    }
    protected void btnApprove_OnClick(object sender, EventArgs e)
    {
        if ((txtAtm.Text.ToDecimalOrDefault() + txtVisa.Text.ToDecimalOrDefault() + txtMaster.Text.ToDecimalOrDefault() + txtBalanceNow.Text.ToDecimalOrDefault()) == 0)
        {
            UserMessages.Message(null, "المبالغ غير صحيحة", string.Empty);
            mpePayment.Show();
            return;

        }


        if ((lblCreditBalance.Text.ToDecimalOrDefault() - (txtAtm.Text.ToDecimalOrDefault() + txtVisa.Text.ToDecimalOrDefault() + txtMaster.Text.ToDecimalOrDefault() + txtBalanceNow.Text.ToDecimalOrDefault())) < 0)
        {

            UserMessages.Message("راجع المبالغ ");
            mpePayment.Show(); return;

        }
        System.Data.Common.DbTransaction trans;
        dc.Connection.Open();
        trans = dc.Connection.BeginTransaction();
        dc.Transaction = trans;



        try
        {
            if (this.Save(true, trans))
            {
                trans.Commit();
                lblDebitBalance.Text =
                    dc.fun_GetAccountBalanceInForeign(COA.CashOnHand.ToInt(), txtOperationDate.Text.ToDate(),
                        acBranch.Value.ToNullableInt()).Value.ToString("0.##");


                lblCreditBalance.Text = dc.fun_GetAccountBalanceInForeign(acCreditAccount.Value.ToNullableInt(), txtOperationDate.Text.ToDate(),
                    acBranch.Value.ToNullableInt()).Value.ToString("0.##"); ;


            }
        }
        catch (Exception ex)
        {
            trans.Rollback();
            btnApprove.Visible = true;
            //btnPrintPay.Enabled = false;
            // btnInvoicePrintWithoutItems.Enabled = false;
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }


        FillInvoicesList();


        var invoiceAmountRest =
              Math.Abs(gvInvoicesList.DataKeys[IndexSelected]["CollectedAmount"].ToDecimal() -
                       gvInvoicesList.DataKeys[IndexSelected]["GrossTotalAmount"].ToDecimal());
        btnApprove.Visible = false;
        mpePayment.Hide();




    }
    protected void txtOperationDate_TextChanged(object sender, EventArgs e)
    {
        mpePayment.Show();
    }
    protected void txtAtm_TextChanged(object sender, EventArgs e)
    {
        mpePayment.Show();
    }
    protected void lnkGenerate_Click(object sender, EventArgs e)
    {

        //System.Data.Common.DbTransaction trans;
        //dc.Connection.Open();
        //trans = dc.Connection.BeginTransaction();
        //dc.Transaction = trans;
        try
        {
            var ID = (sender as LinkButton).CommandArgument;


            Response.Redirect("~/Sales/InvoiceForm.aspx?GenerateInoice_ID=" + ID, false);

        }
        catch (Exception ex)
        {
            // trans.Rollback();
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }






    }
    #endregion
}