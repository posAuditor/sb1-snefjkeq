using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using XPRESS.Common;
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;

public partial class Accounting_JournalEntry1 : UICulturePage
{
    XpressDataContext dc = new XpressDataContext();

    #region Properties

    public byte DocStatus_ID
    {
        get
        {
            if (ViewState["DocStatus_ID"] == null) return 1;
            return (byte)ViewState["DocStatus_ID"];
        }

        set
        {
            ViewState["DocStatus_ID"] = value;
        }
    }

    protected string ImgStatus
    {
        get
        {
            string result = Page.ResolveClientUrl("~/images/");
            if (ViewState["ImgStatus"] == null) result += "new"; else result += ViewState["ImgStatus"].ToExpressString();
            result += this.MyContext.CurrentCulture == XPRESS.Common.ABCulture.Arabic ? "-ar" : string.Empty;
            return result;
        }

        set
        {
            ViewState["ImgStatus"] = value;
        }
    }

    private int Operation_ID
    {
        get
        {
            if (ViewState["Operation_ID"] == null) return 0;
            return (int)ViewState["Operation_ID"];
        }

        set
        {
            ViewState["Operation_ID"] = value;
        }
    }

    private bool EditMode
    {
        get
        {
            if (ViewState["EditMode"] == null) return false;
            return (bool)ViewState["EditMode"];
        }

        set
        {
            ViewState["EditMode"] = value;
        }
    }

    private DataTable dtOperationDetails
    {
        get
        {
            if (Session["dtOperationDetails" + this.WinID] == null)
            {
                Session["dtOperationDetails" + this.WinID] = dc.usp_JournalEntryDetails_Select(null, 0).CopyToDataTable();
            }
            return (DataTable)Session["dtOperationDetails" + this.WinID];
        }

        set
        {
            Session["dtOperationDetails" + this.WinID] = value;
        }
    }

    private int EditID
    {
        get
        {
            if (ViewState["EditID"] == null) return 0;
            return (int)ViewState["EditID"];
        }

        set
        {
            ViewState["EditID"] = value;
        }
    }

    private decimal TotalDebit
    {
        get
        {
            if (ViewState["TotalDebit"] == null) return 0;
            return (decimal)ViewState["TotalDebit"];
        }

        set
        {
            ViewState["TotalDebit"] = value;
        }
    }

    private decimal TotalCredit
    {
        get
        {
            if (ViewState["TotalCredit"] == null) return 0;
            return (decimal)ViewState["TotalCredit"];
        }

        set
        {
            ViewState["TotalCredit"] = value;
        }
    }

    private string DocRandomString
    {
        get
        {
            if (ViewState["DocRandomString"] == null)
            {
                ViewState["DocRandomString"] = DateTime.Now.Ticks.ToExpressString() + "_" + Guid.NewGuid().ToExpressString();
            }
            return (string)ViewState["DocRandomString"];
        }

        set
        {
            ViewState["DocRandomString"] = value;
        }
    }

    private string DebitColumnName
    {
        get
        {
            if (ViewState["DebitColumnName"] == null) return "DebitForeignAmount";
            return (string)ViewState["DebitColumnName"];
        }

        set
        {
            ViewState["DebitColumnName"] = value;
        }
    }

    private string CreditColumnName
    {
        get
        {
            if (ViewState["CreditColumnName"] == null) return "CreditForeignAmount";
            return (string)ViewState["CreditColumnName"];
        }

        set
        {
            ViewState["CreditColumnName"] = value;
        }
    }

    #endregion

    #region PageEvents
    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {

            this.SetEditMode();
            if (!Page.IsPostBack)
            {
                this.DocRandomString.ToString();
                this.CheckSecurity();
                this.LoadControls();
                this.SetDefaults();
                if (!string.IsNullOrEmpty(Request.QueryString["Generate_ID"]))
                {
                    this.FillJournalEntry();
                }
                else
                {
                    if (EditMode) this.FillJournalEntry();
                }

            }


            ucNav.SourceDocTypeType_ID = DocumentsTableTypes.Operation.ToInt();
            ucNav.EntryType = 1;
            ucNav.Res_ID = this.Operation_ID;
            //ucNav.btnHandler += new CustomControls_ucNavigation.OnButtonClick(ucNav_btnHandler);
            //ucNav.btnHandlerPrev += new CustomControls_ucNavigation.OnButtonClick(ucNav_btnHandlerPrev);
            //ucNav.btnHandlerFirst += new CustomControls_ucNavigation.OnButtonClick(ucNav_btnHandlerFirst);
            //ucNav.btnHandlerLast += new CustomControls_ucNavigation.OnButtonClick(ucNav_btnHandlerLast);
            //ucNav.btnHandlerAddNew += new CustomControls_ucNavigation.OnButtonClick(ucNav_btnHandlerAddNew);
            //ucNav.btnHandlerSearch += new CustomControls_ucNavigation.OnButtonClick(ucNav_btnHandlerSearch);


            if (Page.IsPostBack)
            {
                WebControl wcICausedPostBack = (WebControl)GetControlThatCausedPostBack(sender as System.Web.UI.Page);
                WebControl wcICausedPostBack1 = (WebControl)GetControlThatCausedPostBack1(sender as System.Web.UI.Page);



                if (wcICausedPostBack != null && wcICausedPostBack1 != null)
                {
                    int indx = wcICausedPostBack1.TabIndex;

                    var nextControlIndex = indx + 1;
                    switch (nextControlIndex)
                    {
                        case 1: acAccount.AutoCompleteFocus();
                            break;
                        case 2: txtDebit.Focus();
                            break;
                        case 3: txtCredit.Focus();
                            break;
                        case 4: btnAddDetail.Focus();
                            break;
                        case 5: btnAddDetail.Focus(); //txtItemCashDiscount.Focus();
                            break;
                        default:
                            acAccount.Focus();
                            break;
                    }


                    //var ctrl = from control in wcICausedPostBack.Parent.Controls.OfType<WebControl>()
                    //           where control.TabIndex > indx
                    //           select control;
                    //ctrl.DefaultIfEmpty(wcICausedPostBack).First().Focus();
                }

            }
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    void ucNav_btnHandler(string strValue)
    {

        RefillForm(strValue);
    }
    void ucNav_btnHandlerPrev(string strValue)
    {
        RefillForm(strValue);
    }
    void ucNav_btnHandlerFirst(string strValue)
    {
        RefillForm(strValue);
    }
    void ucNav_btnHandlerLast(string strValue)
    {
        RefillForm(strValue);
    }
    void ucNav_btnHandlerAddNew(string strValue)
    {
        Response.Redirect(PageLinks.JournalEntry);
    }
    void ucNav_btnHandlerSearch(string strValue)
    {
        RefillForm(strValue);
    }


    private void RefillForm(string strValue)
    {
        if (!string.IsNullOrEmpty(strValue))
        {
            this.Operation_ID = strValue.ToInt();
            this.EditID = strValue.ToInt();
            this.EditMode = true;
            this.DocRandomString.ToString();
            this.CheckSecurity();
            this.LoadControls();
            this.SetDefaults();
            if (!string.IsNullOrEmpty(Request.QueryString["Generate_ID"]))
            {
                this.FillJournalEntry();
            }
            else
            {
                if (EditMode) this.FillJournalEntry();
            }
            this.Calculate();
        }
    }




    protected Control GetControlThatCausedPostBack1(System.Web.UI.Page page)
    {
        Control control = null;

        string ctrlname = page.Request.Params.Get("__EVENTTARGET");
        if (ctrlname.StartsWith("cph_ac"))
        {   //""ctl00$cph$acItem$hfAutocomplete""
            ctrlname = "ctl00$" + ctrlname.Replace("_", "$");
        }
        if (ctrlname != null && ctrlname != string.Empty)
        {
            control = page.FindControl(ctrlname);
        }
        else
        {
            foreach (string ctl in page.Request.Form)
            {
                Control c = page.FindControl(ctl);
                if (c is System.Web.UI.WebControls.Button || c is System.Web.UI.WebControls.ImageButton)
                {
                    control = c;
                    break;
                }
            }
        }
        return control;

    }
    protected Control GetControlThatCausedPostBack(System.Web.UI.Page page)
    {
        Control control = null;

        string ctrlname = page.Request.Params.Get("__EVENTTARGET");
        if (ctrlname.StartsWith("cph_ac"))
        {   //""ctl00$cph$acItem$hfAutocomplete""
            ctrlname = "ctl00$" + ctrlname.Replace("_", "$").Replace("txt", "hf").Replace("Text", ""); ;
        }
        if (ctrlname != null && ctrlname != string.Empty)
        {
            control = page.FindControl(ctrlname);
        }
        else
        {
            foreach (string ctl in page.Request.Form)
            {
                Control c = page.FindControl(ctl);
                if (c is System.Web.UI.WebControls.Button || c is System.Web.UI.WebControls.ImageButton)
                {
                    control = c;
                    break;
                }
            }
        }
        return control;

    }




    protected void Page_PreRender(object sender, EventArgs e)
    {
        this.CustomPage();
    }


    #endregion

    #region Control Events

    protected void btnPrint_Click(object sender, EventArgs e)
    {
        try
        {
            ReportDocument doc = new ReportDocument();
            doc.Load(Server.MapPath("~\\Reports\\journalEntry_Print.rpt"));
            doc.SetParameterValue("@Operation_ID", this.Operation_ID);
            Response.Redirect(PageLinks.Print + "?File=" + doc.ExportToPDF(acBranch.Value.ToNullableInt(), "journalEntry"), false);
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void ddlCurrency_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            var ratio = dc.fun_GetCurrentRatio(ddlCurrency.SelectedValue.ToInt(), txtOperationDate.Text.ToDate());
            txtRatio.Text = ratio == null ? string.Empty : ratio.ToExpressString();
            // if (sender != null) this.FocusNextControl(sender);
            this.FilterByBranchAndCurrency();
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void btnAddDetail_click(object sender, EventArgs e)
    {
        try
        {

            DataRow r = null;
            if (this.EditID == 0)
            {
                r = this.dtOperationDetails.NewRow();
                r["ID"] = this.dtOperationDetails.GetID("ID");
            }
            else
            {
                r = this.dtOperationDetails.Select("ID=" + this.EditID)[0];
            }

            r["Account_ID"] = acAccount.Value.ToInt();
            r["DebitAmount"] = txtDebit.Text.ToDecimalOrDefault();
            r["CreditAmount"] = txtCredit.Text.ToDecimalOrDefault();
            r[this.DebitColumnName] = txtDebit.Text.ToDecimalOrDefault();
            r[this.CreditColumnName] = txtCredit.Text.ToDecimalOrDefault();
            r["Description"] = txtDetailNotes.Text;
            r["CostCenter_ID"] = acDetailCostCenter.Value.ToIntOrDBNULL();
            r["AccountName"] = acAccount.Text;
            r["CostCenterName"] = acDetailCostCenter.Text;
            if (txtDate.Text.ToDate() != null)
            {
                r["OperDate"] = txtDate.Text.ToDate();
            }

            r["VendorsSecond_ID"] = acVendorsSecond.Value.ToIntOrDBNULL();
            r["VendorsSecondname"] = acVendorsSecond.Text;

            if (this.EditID == 0) this.dtOperationDetails.Rows.Add(r);

            this.ClearDetailForm();
            this.BindDetailsGrid();
            // ddlType.Focus();
            // acAccount.Focus();
            txtCredit.Enabled = true;
            txtDebit.Enabled = true;
            this.EditID = 0;
            acAccount.AutoCompleteFocus();
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void BtnClearDetail_Click(object sender, EventArgs e)
    {
        try
        {
            this.ClearDetailForm();
            // ddlType.Focus();
            // acAccount.Focus();
            this.EditID = 0;
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void gvDetails_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        try
        {
            gvDetails.PageIndex = e.NewPageIndex;
            this.BindDetailsGrid();
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void gvDetails_SelectedIndexChanging(object sender, GridViewSelectEventArgs e)
    {
        try
        {
            this.EditID = gvDetails.DataKeys[e.NewSelectedIndex]["ID"].ToInt();
            DataRow r = this.dtOperationDetails.Select("ID=" + this.EditID.ToExpressString())[0];

            ddlType.SelectedValue = r[this.DebitColumnName].ToDecimal() == 0 ? "1" : "0";
            acAccount.Value = r["Account_ID"].ToExpressString();
            acDetailCostCenter.Value = r["CostCenter_ID"].ToExpressString();
            //  txtDebit.Text = r[this.DebitColumnName].ToDecimal() == 0 ? r[this.CreditColumnName].ToExpressString() : r[this.DebitColumnName].ToExpressString();
            txtDebit.Text = r[this.DebitColumnName].ToExpressString();
            txtCredit.Text = r[this.CreditColumnName].ToExpressString();
            txtDetailNotes.Text = r["Description"].ToExpressString();

            acVendorsSecond.Value = r["VendorsSecond_ID"].ToExpressString();



        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void gvDetails_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            int ID = gvDetails.DataKeys[e.RowIndex]["ID"].ToInt();
            DataRow dr = this.dtOperationDetails.Select("ID=" + ID.ToExpressString())[0];
            dr.Delete();
            this.ClearDetailForm();
            this.BindDetailsGrid();
            this.EditID = 0;
            UserMessages.Message(this.MyContext.PageData.PageTitle, Resources.UserInfoMessages.OperationSuccess, string.Empty);
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void acBranch_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            this.FilterByBranchAndCurrency();
            // if (sender != null) this.FocusNextControl(sender);
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void BtnSave_Click(object sender, EventArgs e)
    {
        System.Data.Common.DbTransaction trans;
        dc.Connection.Open();
        trans = dc.Connection.BeginTransaction();
        dc.Transaction = trans;
        try
        {
            if (this.Save(false, trans))
                trans.Commit();
        }
        catch (Exception ex)
        {
            trans.Rollback();
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void BtnApprove_Click(object sender, EventArgs e)
    {
        System.Data.Common.DbTransaction trans;
        dc.Connection.Open();
        trans = dc.Connection.BeginTransaction();
        dc.Transaction = trans;
        try
        {
            if (this.Save(true, trans))
                trans.Commit();
        }
        catch (Exception ex)
        {
            trans.Rollback();
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    protected void btnCancel_Click(object sender, EventArgs e)
    {
        try
        {
            dc.usp_JournalEntry_Cancel(this.Operation_ID, MyContext.UserProfile.Contact_ID, DateTime.Now);
            LogAction(Actions.Delete, txtSerial.Text, dc);
            UserMessages.Message(null, Resources.UserInfoMessages.OperationSuccess, PageLinks.JournalEntry + "?ID=" + this.Operation_ID.ToExpressString(), PageLinks.JournalEntriesList, PageLinks.JournalEntry);
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }


    protected void btnCancelApprove_Click(object sender, EventArgs e)
    {
        //System.Data.Common.DbTransaction trans;
        //dc.Connection.Open();
        //trans = dc.Connection.BeginTransaction();
        //dc.Transaction = trans;
        try
        {
            dc.usp_CancelApprove_Operation(this.Operation_ID);
            //trans.Commit();
            UserMessages.Message(null, Resources.UserInfoMessages.OperationSuccess, PageLinks.JournalEntry + Request.PathInfo + "?ID=" + this.Operation_ID.ToExpressString(), PageLinks.JournalEntry, PageLinks.JournalEntry + Request.PathInfo);

        }
        catch (Exception ex)
        {
            // trans.Rollback();
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }
    protected void txtDebit_TextChanged(object sender, EventArgs e)
    {
        if (txtDebit.Text.Length > 0)
        {
            txtCredit.Enabled = false;
            btnAddDetail.Focus();
        }
        else
        {
            txtCredit.Enabled = true;
            txtCredit.Focus();
        }

    }
    protected void txtCredit_TextChanged(object sender, EventArgs e)
    {
        if (txtCredit.Text.Length > 0)
        {
            txtDebit.Enabled = false;
            btnAddDetail.Focus();
        }
        else
        {
            txtDebit.Enabled = true;
            txtDebit.Focus();
        }
    }



    #endregion

    #region Private Methods
    private void FilterByBranchAndCurrency()
    {
        try
        {
            string Currency_ID = acOperationType.Value.ToIntOrDefault() == OperationTypes.CurrenciesDiff.ToInt() ? string.Empty : ddlCurrency.SelectedValue;
            //Disbale Branch from Customer
            acAccount.ContextKey = this.MyContext.CurrentCulture.ToByte().ToExpressString() + ",," + Currency_ID + ",,false,false";
            //acAccount.ContextKey = this.MyContext.CurrentCulture.ToByte().ToExpressString() + "," + acBranch.Value + "," + Currency_ID + ",,true";
            acDetailCostCenter.ContextKey = acCostCenter.ContextKey = this.MyContext.CurrentCulture.ToByte().ToExpressString() + ",false," + acBranch.Value;
            this.setWorkingMode();
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    private void LoadControls()
    {
        this.dtOperationDetails = null;
        acCostCenter.ContextKey = this.MyContext.CurrentCulture.ToByte().ToExpressString();
        acOperationType.ContextKey = string.Empty;
        acOperationType.Value = "8";
        acBranch.ContextKey = string.Empty;

        acVendorsSecond.ContextKey = string.Empty;
        // if (this.MyContext.UserProfile.Branch_ID != null)
        // {
        //    acBranch.Value = this.MyContext.UserProfile.Branch_ID.ToExpressString();
        // acBranch.Enabled = false;
        // }
        ddlCurrency.DataSource = dc.usp_Currency_Select(false);
        ddlCurrency.DataTextField = "Name";
        ddlCurrency.DataValueField = "ID";
        ddlCurrency.DataBind();
        this.FilterByBranchAndCurrency();
        this.BindDetailsGrid();
        lblCreatedBy.Text = MyContext.UserProfile.EmployeeName;


    }

    private void BindDetailsGrid()
    {
        this.Calculate();
        gvDetails.DataSource = this.dtOperationDetails;
        gvDetails.DataBind();
        //acBranch.Enabled = (gvDetails.Rows.Count == 0) && (this.MyContext.UserProfile.Branch_ID == null);
        acOperationType.Enabled = ddlCurrency.Enabled = (gvDetails.Rows.Count == 0);
    }

    private void ClearDetailForm()
    {
        acAccount.Clear();
        txtDebit.Clear();
        txtCredit.Clear();
        acDetailCostCenter.Clear();
        txtDetailNotes.Clear();
        txtDate.Clear();
    }

    private void SetEditMode()
    {
        if (Request["ID"] != null)
        {
            this.EditMode = true;
            this.Operation_ID = Request["ID"].ToInt();
        }
    }

    private bool Save(bool IsApproving, System.Data.Common.DbTransaction trans)
    {
        if (dtOperationDetails.AsEnumerable().Where(r => r.RowState != DataRowState.Deleted).Count() == 0)
        {
            UserMessages.Message(null, Resources.UserInfoMessages.JournalEntryNotBalanced, string.Empty);
            trans.Rollback();
            return false;
        }

        if (this.TotalCredit != this.TotalDebit)
        {
            UserMessages.Message(null, Resources.UserInfoMessages.JournalEntryNotBalanced, string.Empty);
            trans.Rollback();
            return false;
        }

        if (txtOperationDate.Text.ToDate() > DateTime.Now.Date)
        {
            UserMessages.Message(null, Resources.UserInfoMessages.DateBiggerThanToday, string.Empty);
            trans.Rollback();
            return false;
        }

        if (acOperationType.Value.ToIntOrDefault() == OperationTypes.CurrenciesDiff.ToInt() && ddlCurrency.SelectedValue.ToInt() != dc.DefaultCurrancy())
        {
            UserMessages.Message(null, Resources.UserInfoMessages.CurrDiffEGP, string.Empty);
            trans.Rollback();
            return false;
        }

        string Serial = string.Empty;
        byte DocStatus_ID = IsApproving ? DocStatus.Approved.ToByte() : DocStatus.Current.ToByte();
        DateTime? ApproveDate = IsApproving ? DateTime.Now : (DateTime?)null;
        int? approvedBY_ID = IsApproving ? MyContext.UserProfile.Contact_ID : (int?)null;
        decimal ZERO_Foreign = acOperationType.Value.ToIntOrDefault() == OperationTypes.CurrenciesDiff.ToInt() ? 0 : 1;

        if (!this.EditMode)
        {
            if (acOperationType.Value.ToInt() == 8)
            {
                this.Operation_ID = dc.usp_JournalEntrySerialSpecial_Insert(acBranch.Value.ToNullableInt(), txtOperationDate.Text.ToDate(), ref Serial, DocStatus_ID, acOperationType.Value.ToInt(), ddlCurrency.SelectedValue.ToInt(), this.TotalDebit * txtRatio.Text.ToDecimal(), this.TotalDebit * ZERO_Foreign, txtRatio.Text.ToDecimal(), txtNotes.Text, this.MyContext.UserProfile.Contact_ID, approvedBY_ID, null, DateTime.Now, ApproveDate, null, acCostCenter.Value.ToNullableInt(), txtUserRefNo.Text, this.DocRandomString);

            }
            else
            {
                this.Operation_ID = dc.usp_JournalEntry_Insert(acBranch.Value.ToNullableInt(), txtOperationDate.Text.ToDate(), ref Serial, DocStatus_ID, acOperationType.Value.ToInt(), ddlCurrency.SelectedValue.ToInt(), this.TotalDebit * txtRatio.Text.ToDecimal(), this.TotalDebit * ZERO_Foreign, txtRatio.Text.ToDecimal(), txtNotes.Text, this.MyContext.UserProfile.Contact_ID, approvedBY_ID, null, DateTime.Now, ApproveDate, null, acCostCenter.Value.ToNullableInt(), txtUserRefNo.Text, this.DocRandomString);


            }
            if (this.Operation_ID > 0)
            {
                foreach (DataRow r in this.dtOperationDetails.Rows)
                {
                    if (r.RowState == DataRowState.Deleted) continue;
                    dc.usp_JournalEntryDetailsWithVendorsSecond_ID_Insert(this.Operation_ID, r["Account_ID"].ToInt(), r[this.DebitColumnName].ToDecimal() * txtRatio.Text.ToDecimal(), r[this.CreditColumnName].ToDecimal() * txtRatio.Text.ToDecimal(), r[this.DebitColumnName].ToDecimal() * ZERO_Foreign, r[this.CreditColumnName].ToDecimal() * ZERO_Foreign, r["Description"].ToExpressString(), r["CostCenter_ID"].ToNullableInt(), r["OperDate"].ToDate(), r["VendorsSecond_ID"].ToNullableInt());
                    if (IsApproving)
                    {
                        decimal Amount = (r[this.DebitColumnName].ToDecimal() != 0 ? r[this.DebitColumnName].ToDecimal() : r[this.CreditColumnName].ToDecimal() * -1) * txtRatio.Text.ToDecimal();
                        dc.usp_CostCenterOperation_Insert(acBranch.Value.ToNullableInt(), r["CostCenter_ID"].ToNullableInt(), txtOperationDate.Text.ToDate(), Amount, this.Operation_ID, DocumentsTableTypes.Operation.ToInt(), r["Description"].ToExpressString());
                    }
                }
                if (IsApproving) dc.usp_CostCenterOperation_Insert(acBranch.Value.ToNullableInt(), acCostCenter.Value.ToNullableInt(), txtOperationDate.Text.ToDate(), this.TotalDebit * txtRatio.Text.ToDecimal(), this.Operation_ID, DocumentsTableTypes.Operation.ToInt(), txtNotes.Text);
                LogAction(IsApproving ? Actions.Approve : Actions.Add, Serial, dc);
            }
        }
        else
        {

            int Result = 0;
            if (acOperationType.Value.ToInt() == 8)
            {
                Result = dc.usp_JournalEntrySerialSpecial_Update(this.Operation_ID, acBranch.Value.ToNullableInt(), txtOperationDate.Text.ToDate(), ref Serial, DocStatus_ID, acOperationType.Value.ToInt(), ddlCurrency.SelectedValue.ToInt(), this.TotalDebit * txtRatio.Text.ToDecimal(), this.TotalDebit * ZERO_Foreign, txtRatio.Text.ToDecimal(), txtNotes.Text, this.MyContext.UserProfile.Contact_ID, approvedBY_ID, null, DateTime.Now, ApproveDate, null, acCostCenter.Value.ToNullableInt(), txtUserRefNo.Text);
            }
            else
            {
                Result = dc.usp_JournalEntry_Update(this.Operation_ID, acBranch.Value.ToNullableInt(), txtOperationDate.Text.ToDate(), ref Serial, DocStatus_ID, acOperationType.Value.ToInt(), ddlCurrency.SelectedValue.ToInt(), this.TotalDebit * txtRatio.Text.ToDecimal(), this.TotalDebit * ZERO_Foreign, txtRatio.Text.ToDecimal(), txtNotes.Text, this.MyContext.UserProfile.Contact_ID, approvedBY_ID, null, DateTime.Now, ApproveDate, null, acCostCenter.Value.ToNullableInt(), txtUserRefNo.Text);


            }


            if (Result > 0)
            {
                foreach (DataRow r in this.dtOperationDetails.Rows)
                {
                    if (r.RowState == DataRowState.Added)
                    {
                        dc.usp_JournalEntryDetailsWithVendorsSecond_ID_Insert(this.Operation_ID, r["Account_ID"].ToInt(), r[this.DebitColumnName].ToDecimal() * txtRatio.Text.ToDecimal(), r[this.CreditColumnName].ToDecimal() * txtRatio.Text.ToDecimal(), r[this.DebitColumnName].ToDecimal() * ZERO_Foreign, r[this.CreditColumnName].ToDecimal() * ZERO_Foreign, r["Description"].ToExpressString(), r["CostCenter_ID"].ToNullableInt(), r["OperDate"].ToDate(), r["VendorsSecond_ID"].ToNullableInt());
                    }
                    if (r.RowState == DataRowState.Modified)
                    {
                        dc.usp_JournalEntryDetailsWithVendorsSecond_ID_Update(r["ID"].ToInt(), r["Account_ID"].ToInt(), r[this.DebitColumnName].ToDecimal() * txtRatio.Text.ToDecimal(), r[this.CreditColumnName].ToDecimal() * txtRatio.Text.ToDecimal(), r[this.DebitColumnName].ToDecimal() * ZERO_Foreign, r[this.CreditColumnName].ToDecimal() * ZERO_Foreign, r["Description"].ToExpressString(), r["CostCenter_ID"].ToNullableInt(), r["OperDate"].ToDate(), r["VendorsSecond_ID"].ToNullableInt());
                    }
                    if (r.RowState == DataRowState.Deleted)
                    {
                        dc.usp_JournalEntryDetails_Delete(r["ID", DataRowVersion.Original].ToInt());
                    }
                    if (r.RowState != DataRowState.Deleted && IsApproving)
                    {
                        decimal Amount = (r[this.DebitColumnName].ToDecimal() != 0 ? r[this.DebitColumnName].ToDecimal() : r[this.CreditColumnName].ToDecimal() * -1) * txtRatio.Text.ToDecimal();
                        dc.usp_CostCenterOperation_Insert(acBranch.Value.ToNullableInt(), r["CostCenter_ID"].ToNullableInt(), txtOperationDate.Text.ToDate(), Amount, this.Operation_ID, DocumentsTableTypes.Operation.ToInt(), string.Empty);
                    }
                }

                if (IsApproving) dc.usp_CostCenterOperation_Insert(acBranch.Value.ToNullableInt(), acCostCenter.Value.ToNullableInt(), txtOperationDate.Text.ToDate(), this.TotalDebit * txtRatio.Text.ToDecimal(), this.Operation_ID, DocumentsTableTypes.Operation.ToInt(), string.Empty);
                LogAction(IsApproving ? Actions.Approve : Actions.Edit, txtSerial.Text, dc);
            }
        }
        Serial = Serial == string.Empty ? string.Empty : " (" + Serial + ") ";
        UserMessages.Message(null, Resources.UserInfoMessages.OperationSuccess + Serial, PageLinks.JournalEntry + "?ID=" + this.Operation_ID.ToExpressString(), PageLinks.JournalEntriesList, PageLinks.JournalEntry);
        return true;
    }

    private void FillJournalEntry()
    {
        if (!string.IsNullOrEmpty(Request.QueryString["Generate_ID"]))
        {
            var JournalEntry = dc.usp_JournalEntry_Select(Request.QueryString["Generate_ID"].ToInt(), null, null, null, string.Empty, null, null, string.Empty, 0).FirstOrDefault();
            ddlCurrency.SelectedValue = JournalEntry.Currency_ID.ToExpressString();
            txtRatio.Text = JournalEntry.Ratio.ToExpressString();
            acBranch.Value = JournalEntry.Branch_ID.ToStringOrEmpty();
            acOperationType.Value = JournalEntry.OperationType_ID.ToExpressString();
            this.FilterByBranchAndCurrency();
            acCostCenter.Value = JournalEntry.CostCenter_ID.ToStringOrEmpty();
            txtUserRefNo.Text = JournalEntry.UserRefNo;
            txtNotes.Text = JournalEntry.Description;
            txtSerial.Text = JournalEntry.Serial;
            ucNav.SetText = JournalEntry.Serial;
            this.DocRandomString = JournalEntry.DocRandomString;
            lblCreatedBy.Text = JournalEntry.CeartedByName;
            lblApprovedBy.Text = JournalEntry.ApprovedByName;
            txtOperationDate.Text = JournalEntry.PostedDate.Value.ToString("d/M/yyyy");
            this.ImgStatus = ((DocStatus)1).ToExpressString();
            btnPrint.Visible = MyContext.PageData.IsPrint;
            btnCancel.Visible = (1 == 1) && MyContext.PageData.IsDelete;
            btnApprove.Visible = (1 == 1) && MyContext.PageData.IsApprove;
            // this.DocStatus_ID = JournalEntry.DocStatus_ID.Value;
            btnCancelApprove.Visible = !btnApprove.Visible && (1 == 2) && MyContext.PageData.IsApprove;

            btnSave.Visible = (1 == 1) && ((MyContext.PageData.IsAdd) || (MyContext.PageData.IsEdit));
            gvDetails.Columns[gvDetails.Columns.Count - 1].Visible = gvDetails.Columns[gvDetails.Columns.Count - 2].Visible = (1 == 1);

            this.dtOperationDetails = dc.usp_JournalEntryDetails_Select(Request.QueryString["Generate_ID"].ToInt(), MyContext.CurrentCulture.ToByte()).CopyToDataTable();
            this.BindDetailsGrid();

        }
        else
        {
            var JournalEntry = dc.usp_JournalEntry_Select(this.Operation_ID, null, null, null, string.Empty, null, null, string.Empty, 0).FirstOrDefault();
            ddlCurrency.SelectedValue = JournalEntry.Currency_ID.ToExpressString();
            txtRatio.Text = JournalEntry.Ratio.ToExpressString();
            acBranch.Value = JournalEntry.Branch_ID.ToStringOrEmpty();
            acOperationType.Value = JournalEntry.OperationType_ID.ToExpressString();
            this.FilterByBranchAndCurrency();
            acCostCenter.Value = JournalEntry.CostCenter_ID.ToStringOrEmpty();
            txtUserRefNo.Text = JournalEntry.UserRefNo;
            txtNotes.Text = JournalEntry.Description;
            txtSerial.Text = JournalEntry.Serial;
            ucNav.SetText = JournalEntry.Serial;
            this.DocRandomString = JournalEntry.DocRandomString;
            lblCreatedBy.Text = JournalEntry.CeartedByName;
            lblApprovedBy.Text = JournalEntry.ApprovedByName;
            txtOperationDate.Text = JournalEntry.PostedDate.Value.ToString("d/M/yyyy");
            this.ImgStatus = ((DocStatus)JournalEntry.DocStatus_ID).ToExpressString();
            btnPrint.Visible = MyContext.PageData.IsPrint;
            //  pnlAddItem.Visible = (JournalEntry.DocStatus_ID == 1);
            btnCancel.Visible = (JournalEntry.DocStatus_ID == 1) && MyContext.PageData.IsDelete;
            btnApprove.Visible = (JournalEntry.DocStatus_ID == 1) && MyContext.PageData.IsApprove;

            btnCancelApprove.Visible = !btnApprove.Visible && (JournalEntry.DocStatus_ID == 2) && MyContext.PageData.IsApprove;
            this.DocStatus_ID = JournalEntry.DocStatus_ID.Value;
            btnSave.Visible = (JournalEntry.DocStatus_ID == 1) && ((MyContext.PageData.IsAdd && !EditMode) || (MyContext.PageData.IsEdit && EditMode));
            //   gvDetails.Columns[gvDetails.Columns.Count - 1].Visible = gvDetails.Columns[gvDetails.Columns.Count - 2].Visible = (JournalEntry.DocStatus_ID == 1);

            this.dtOperationDetails = dc.usp_JournalEntryDetails_Select(this.Operation_ID, MyContext.CurrentCulture.ToByte()).CopyToDataTable();
            this.BindDetailsGrid();
        }


    }

    private void CheckSecurity()
    {
        if (!MyContext.PageData.IsViewDoc) Response.Redirect(PageLinks.Authorization, true);
        btnSave.Visible = (MyContext.PageData.IsAdd && !EditMode) || (MyContext.PageData.IsEdit && EditMode);
        btnApprove.Visible = MyContext.PageData.IsApprove;
        btnCancelApprove.Visible = !btnApprove.Visible && MyContext.PageData.IsApprove;

        btnCancel.Visible = MyContext.PageData.IsDelete && EditMode;
    }

    private void Calculate()
    {
        this.TotalDebit = 0;
        this.TotalCredit = 0;
        foreach (DataRow r in this.dtOperationDetails.Rows)
        {
            if (r.RowState == DataRowState.Deleted) continue;
            TotalDebit += r[this.DebitColumnName].ToDecimal();
            TotalCredit += r[this.CreditColumnName].ToDecimal();
        }

        lblTotalDebit.Text = TotalDebit.ToString("0.####");
        lblTotalCredit.Text = TotalCredit.ToString("0.####");
        lblDifference.Text = (TotalDebit - TotalCredit).ToString("0.####");
        lblDifference.ForeColor = lblDifference.Text != "0" ? System.Drawing.Color.Red : System.Drawing.Color.Black;
    }

    private void CustomPage()
    {
        acBranch.IsRequired = acBranch.Visible = MyContext.Features.BranchesEnabled;
        acDetailCostCenter.Visible = acCostCenter.Visible = MyContext.Features.CostCentersEnabled;
    }

    private void SetDefaults()
    {
        if (Page.IsPostBack) return;
        var company = dc.usp_Company_Select().FirstOrDefault();

        if (company.AutoDate.Value) txtOperationDate.Text = DateTime.Now.Date.ToString("d/M/yyyy");
        if (txtOperationDate.IsNotEmpty) this.ddlCurrency_SelectedIndexChanged(null, null);

        txtOperationDate.Enabled = !company.LockAutoDate.Value;
    }

    private void setWorkingMode()
    {
        this.DebitColumnName = acOperationType.Value.ToIntOrDefault() == OperationTypes.CurrenciesDiff.ToInt() ? "DebitAmount" : "DebitForeignAmount";
        this.CreditColumnName = acOperationType.Value.ToIntOrDefault() == OperationTypes.CurrenciesDiff.ToInt() ? "CreditAmount" : "CreditForeignAmount";
        //gvDetails.Columns[3].Visible = gvDetails.Columns[4].Visible = acOperationType.Value.ToIntOrDefault() == OperationTypes.CurrenciesDiff.ToInt();
        //  gvDetails.Columns[1].Visible = gvDetails.Columns[2].Visible = acOperationType.Value.ToIntOrDefault() != OperationTypes.CurrenciesDiff.ToInt();
    }

    #endregion

    protected void gvDetails_SelectedIndexChanging1(object sender, GridViewSelectEventArgs e)
    {
        try
        {
            this.EditID = gvDetails.DataKeys[e.NewSelectedIndex]["ID"].ToInt();
            DataRow r = this.dtOperationDetails.Select("ID=" + this.EditID.ToExpressString())[0];

            ddlType.SelectedValue = r[this.DebitColumnName].ToDecimal() == 0 ? "1" : "0";
            acAccount.Value = r["Account_ID"].ToExpressString();
            acDetailCostCenter.Value = r["CostCenter_ID"].ToExpressString();
            //  txtDebit.Text = r[this.DebitColumnName].ToDecimal() == 0 ? r[this.CreditColumnName].ToExpressString() : r[this.DebitColumnName].ToExpressString();
            txtDebit.Text = r[this.DebitColumnName].ToExpressString();
            txtCredit.Text = r[this.CreditColumnName].ToExpressString();
            txtDetailNotes.Text = r["Description"].ToExpressString();





        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }
}