using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using XPRESS.Common;

public partial class Accounting_ChartOfAccountTable1 : UICulturePage
{
    XpressDataContext dc = new XpressDataContext();
    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            this.CheckSecurity();
            if (!Page.IsPostBack)
            {
                this.LoadControls();
                this.FillCOATree(acAccountSearch.Text, acParentAccountSearch.Value.ToExpressString() );
                this.FixUnbalancedOperations();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    private DataTable dtCOATree
    {
        get
        {
            return (DataTable)Session["dtCOATree" + this.WinID];
        }

        set
        {
            Session["dtCOATree" + this.WinID] = value;
        }
    }

    private void FillCOATree(string name,string parentName)
    {
        acParentAccount.Refresh();

        //this.dtCOATree = dc.usp_ChartOfAccountLevelTree_Select(this.MyContext.CurrentCulture.ToByte(), MyContext.UserProfile.Branch_ID, DropTreeLevel.SelectedValue.ToInt()).CopyToDataTable();
        this.dtCOATree = dc.usp_ChartOfAccountLevelTree_View(this.MyContext.CurrentCulture.ToByte(), MyContext.UserProfile.Branch_ID, name, parentName, DropTreeLevel.SelectedValue.ToInt()).CopyToDataTable();
        gvchartOfAccount.DataSource = dtCOATree;
        gvchartOfAccount.DataBind();

    }


    private void LoadControls()
    {
        acParentAccountSearch.ContextKey = this.MyContext.CurrentCulture.ToByte().ToExpressString() + "," + acBranch.Value;
        acOppsiteAccount.ContextKey = this.MyContext.CurrentCulture.ToByte().ToExpressString() + ",,," + COA.Capital.ToInt().ToExpressString() + ",true";
        acOppsiteAccount.Value = COA.Capital.ToInt().ToExpressString();
        acBranch.ContextKey = string.Empty;
        acParentAccount.ContextKey = this.MyContext.CurrentCulture.ToByte().ToExpressString() + "," + acBranch.Value;
        ddlCurrency.DataSource = dc.usp_Currency_Select(false);
        ddlCurrency.DataTextField = "Name";
        ddlCurrency.DataValueField = "ID";
        ddlCurrency.DataBind();
        acAccountFrom.ContextKey = this.MyContext.CurrentCulture.ToInt().ToExpressString();
        acAccountTo.ContextKey = this.MyContext.CurrentCulture.ToInt().ToExpressString();
        acAccountSearch.ContextKey = this.MyContext.CurrentCulture.ToInt().ToExpressString();



        if (MyContext.UserProfile.Branch_ID != null)
        {
            acBranch.Value = MyContext.UserProfile.Branch_ID.ToExpressString();
            acBranch.Enabled = false;
        }

        txtStartFrom.Text = this.MyContext.FiscalYearStartDate.ToString("d/M/yyyy");

    }

    private void CheckSecurity()
    {
        if (!this.MyContext.PageData.IsViewDoc) Response.Redirect(PageLinks.Authorization, true);
    }

    private void CustomPage()
    {
        acBranch.Visible = MyContext.Features.BranchesEnabled;
    }

    protected void gvchartOfAccount_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {


        try
        {
            gvchartOfAccount.PageIndex = e.NewPageIndex;
            gvchartOfAccount.DataSource = this.dtCOATree;
            gvchartOfAccount.DataBind();
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }




        //try
        //{
        //    gvchartOfAccount.PageIndex = e.NewPageIndex;
        //    this.FillCOATree();
        //}
        //catch (Exception ex)
        //{
        //    Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        //}
    }

    private int EditID
    {
        get
        {
            if (ViewState["EditID"] == null) return 0;
            return (int)ViewState["EditID"];
        }

        set
        {
            ViewState["EditID"] = value;
        }
    }


    protected void gvchartOfAccount_SelectedIndexChanging(object sender, GridViewSelectEventArgs e)
    {
        var ChartOfAccount_ID = gvchartOfAccount.DataKeys[e.NewSelectedIndex]["ID"].ToInt();
        this.EditID = ChartOfAccount_ID;
        var CachedNumber = gvchartOfAccount.DataKeys[e.NewSelectedIndex]["CachedNumber"].ToExpressString();
        var NameAr = gvchartOfAccount.DataKeys[e.NewSelectedIndex]["NameAr"].ToExpressString();
        var NameEn = gvchartOfAccount.DataKeys[e.NewSelectedIndex]["NameEn"].ToExpressString();
        var ParentId = gvchartOfAccount.DataKeys[e.NewSelectedIndex]["ParentId"].ToInt();
        var OpeningBalance = gvchartOfAccount.DataKeys[e.NewSelectedIndex]["OpeningBalance"].ToDecimalOrDefault();
        var Branch_ID = gvchartOfAccount.DataKeys[e.NewSelectedIndex]["Branch_ID"].ToIntOrDefault();
        txtRatio.Text = "1";
        txtAccountName.Text = NameAr;
        txtAccountNameEN.Text = NameEn;
        acParentAccount.Value = ParentId.ToExpressString();
        acBranch.Value = Branch_ID.ToExpressString();
        txtOpenBalance.Text = OpeningBalance.ToExpressString();



        mpeCreateAccount.Show();
    }
    protected void gvchartOfAccount_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            int result = 0;
            switch (dc.IsExistRelated(gvchartOfAccount.DataKeys[e.RowIndex]["ID"].ToInt()))
            {
                case 1:
                    UserMessages.Message(null, "لا يمكن الحذف لانة مربوط بي عميل", string.Empty);
                    return;
                case 2:
                    UserMessages.Message(null, "لا يمكن الحذف لانة مربوط بي مورد", string.Empty);
                    return;
                case 3:
                    UserMessages.Message(null, "لا يمكن الحذف لانة مربوط بي أصل", string.Empty);
                    return;
                case 4:
                    UserMessages.Message(null, "لا يمكن الحذف لانة مربوط بي تسوية او حركة مخزنية", string.Empty);
                    return;
                case 5:
                    UserMessages.Message(null, "لا يمكن الحذف لانة مربوط بي مشتريات", string.Empty);
                    return;
                case 6:
                    UserMessages.Message(null, "لا يمكن الحذف لانة مربوط بي مردود مشتريات", string.Empty);
                    return;
                case 7:
                    UserMessages.Message(null, "لا يمكن الحذف لانة مربوط بي  مبيعات", string.Empty);
                    return;
                case 8:
                    UserMessages.Message(null, "لا يمكن الحذف لانة مربوط بي مردود مبيعات", string.Empty);
                    return;
                case 9:
                    UserMessages.Message(null, "لا يمكن الحذف لانة مربوط بي  شيك", string.Empty);
                    return;
                case 10:
                    UserMessages.Message(null, "لا يمكن الحذف لانة مربوط بي قيد", string.Empty);
                    return;
                case 11:
                    UserMessages.Message(null, "لا يمكن الحذف لانة مربوط بي السلف", string.Empty);
                    return;
                case 12:
                    UserMessages.Message(null, "لا يمكن الحذف لانة مربوط بي  إعدادات عامة", string.Empty);
                    return;
                case 13:
                    UserMessages.Message(null, "لا يمكن الحذف لانة مربوط بي فئة الاصول  ", string.Empty);
                    return;
                case 14:
                    UserMessages.Message(null, "لا يمكن الحذف لانة مربوط بي  إعدادات نقطة البيع", string.Empty);
                    return;
                case 16:
                    UserMessages.Message(null, "لا يمكن الحذف لانة مربوط بي  بنك", string.Empty);
                    return;
                case 15:
                    UserMessages.Message(null, "لا يمكن الحذف لانة مربوط بي حساب ابن", string.Empty);
                    return;


            }
            result = dc.usp_ChartOfAccount_Delete(gvchartOfAccount.DataKeys[e.RowIndex]["ID"].ToInt());
            if (result == -6)
            {
                UserMessages.Message(null, Resources.UserInfoMessages.DataCantDelete, string.Empty);
                return;
            }

            LogAction(Actions.Delete, gvchartOfAccount.DataKeys[e.RowIndex]["NameAr"].ToExpressString(), dc);

            this.FillCOATree(acAccountSearch.Text, acParentAccountSearch.Value.ToExpressString());
            UserMessages.Message(null, Resources.UserInfoMessages.OperationSuccess, string.Empty);
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }
    protected void DropTreeLevel_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            this.FillCOATree(acAccountSearch.Text, acParentAccountSearch.Value.ToExpressString());
        }
        catch
        {

        }
    }
    protected void acBranch_SelectedIndexChanged(object sender, AutoCompleteEventArgs e)
    {

        acParentAccount.ContextKey = this.MyContext.CurrentCulture.ToByte().ToExpressString() + "," + acBranch.Value;
        mpeCreateAccount.Show();
    }
    protected void btnSaveAccount_Click(object sender, EventArgs e)
    {
        System.Data.Common.DbTransaction trans;
        dc.Connection.Open();
        trans = dc.Connection.BeginTransaction();
        dc.Transaction = trans;
        try
        {
            int result = 0;
            if (this.EditID > 0)
            {
                result = dc.usp_ChartOfAccountException_Update(this.EditID, txtAccountName.TrimmedText, txtAccountNameEN.TrimmedText, acParentAccount.Value.ToInt(), false, acBranch.Value.ToNullableInt(), ddlCurrency.SelectedValue.ToInt(), txtRatio.Text.ToDecimalOrDefault(), txtOpenBalance.Text.ToDecimalOrDefault(), txtStartFrom.Text.ToDate(), acOppsiteAccount.Value.ToInt(), false);
                if (result == -2)
                {
                    UserMessages.Message(this.MyContext.PageData.PageTitle, Resources.UserInfoMessages.AccountNameAlreadyExists, string.Empty);
                    trans.Rollback();
                    ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "ReHide", "$(HideAddOnlyPart())", true);
                    mpeCreateAccount.Show();
                    return;
                }
                this.FillCOATree(acAccountSearch.Text, acParentAccountSearch.Value.ToExpressString());

                LogAction(Actions.Edit, txtAccountName.TrimmedText + " : " + txtAccountNameEN.TrimmedText, dc);
            }
            else
            {
                result = dc.usp_ChartOfAccount_Insert(txtAccountName.TrimmedText, txtAccountNameEN.TrimmedText, acParentAccount.Value.ToInt(), false, acBranch.Value.ToNullableInt(), ddlCurrency.SelectedValue.ToInt(), txtRatio.Text.ToDecimalOrDefault(), txtOpenBalance.Text.ToDecimalOrDefault(), txtStartFrom.Text.ToDate(), acOppsiteAccount.Value.ToInt());
                if (result == -2)
                {
                    UserMessages.Message(this.MyContext.PageData.PageTitle, Resources.UserInfoMessages.AccountNameAlreadyExists, string.Empty);
                    trans.Rollback();
                    mpeCreateAccount.Show();
                    return;
                }

                if (result == -30)
                {
                    UserMessages.Message(this.MyContext.PageData.PageTitle, Resources.UserInfoMessages.InvalidParentBranch, string.Empty);
                    trans.Rollback();
                    mpeCreateAccount.Show();
                    return;
                }

                if (result == -3)
                {
                    UserMessages.Message(this.MyContext.PageData.PageTitle, Resources.UserInfoMessages.AccountAlreadyFoundOperation, string.Empty);
                    trans.Rollback();
                    mpeCreateAccount.Show();
                    return;
                }

                if (txtStartFrom.Text.ToDate() > DateTime.Now.Date && txtOpenBalance.Text.ToDecimalOrDefault() > 0)
                {
                    UserMessages.Message(null, Resources.UserInfoMessages.DateBiggerThanToday, string.Empty);
                    trans.Rollback();
                    mpeCreateAccount.Show();
                    return;
                }

                LogAction(Actions.Add, txtAccountName.TrimmedText + " : " + txtAccountNameEN.TrimmedText, dc);
                this.FillCOATree(acAccountSearch.Text, acParentAccountSearch.Value.ToExpressString());
            }

            UserMessages.Message(this.MyContext.PageData.PageTitle, Resources.UserInfoMessages.OperationSuccess, string.Empty);
            trans.Commit();
        }
        catch (Exception ex)
        {
            trans.Rollback();
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }
    }

    private int ChartOfAccount_ID
    {
        get
        {
            if (ViewState["ChartOfAccount_ID"] == null) return 0;
            return (int)ViewState["ChartOfAccount_ID"];
        }

        set
        {
            ViewState["ChartOfAccount_ID"] = value;
        }
    }

    protected void LnkChangeCodeAccount_Click(object sender, EventArgs e)
    {
        this.ChartOfAccount_ID = (sender as LinkButton).CommandArgument.ToIntOrDefault();
        var obj = dc.ChartOfAccounts.Where(x => x.ID == this.ChartOfAccount_ID).FirstOrDefault();
        if (obj != null)
        {
            txtCachedNumber.Text = obj.CachedNumber;

        }

        mpeChangeCachedNumber.Show();
    }
    protected void btnOkChangeNumber_Click(object sender, EventArgs e)
    {

        var obj = dc.ChartOfAccounts.Where(x => x.ID == this.ChartOfAccount_ID).FirstOrDefault();
        if (obj != null)
        {
            obj.CachedNumber = txtCachedNumber.Text;
            dc.SubmitChanges();
            txtCachedNumber.Clear();
            this.FillCOATree(acAccountSearch.Text, acParentAccountSearch.Value.ToExpressString());
        }
    }
    protected void btnMerge_Click(object sender, EventArgs e)
    {

        try
        {
             
            switch (dc.MergeTowAccount(acAccountFrom.Value.ToInt(), acAccountTo.Value.ToInt()))
            {
                case 1:
                    UserMessages.Message(null, "لا يمكن دمج لانة مربوط بي عميل", string.Empty);
                    return;
                case 2:
                    UserMessages.Message(null, "لا يمكن دمج لانة مربوط بي مورد", string.Empty);
                    return;
                case 3:
                    UserMessages.Message(null, "لا يمكن دمج لانة مربوط بي أصل", string.Empty);
                    return;
                case 4:
                    UserMessages.Message(null, "لا يمكن دمج لانة مربوط بي تسوية او حركة مخزنية", string.Empty);
                    return;
                case 5:
                    UserMessages.Message(null, "لا يمكن دمج لانة مربوط بي مشتريات", string.Empty);
                    return;
                case 6:
                    UserMessages.Message(null, "لا يمكن دمج لانة مربوط بي مردود مشتريات", string.Empty);
                    return;
                case 7:
                    UserMessages.Message(null, "لا يمكن دمج لانة مربوط بي  مبيعات", string.Empty);
                    return;
                case 8:
                    UserMessages.Message(null, "لا يمكن دمج لانة مربوط بي مردود مبيعات", string.Empty);
                    return;
                case 9:
                    UserMessages.Message(null, "لا يمكن دمج لانة مربوط بي  شيك", string.Empty);
                    return;
                case 10:
                    UserMessages.Message(null, "لا يمكن دمج لانة مربوط بي قيد", string.Empty);
                    return;
                case 11:
                    UserMessages.Message(null, "لا يمكن دمج لانة مربوط بي السلف", string.Empty);
                    return;
                case 12:
                    UserMessages.Message(null, "لا يمكن دمج لانة مربوط بي  إعدادات عامة", string.Empty);
                    return;
                case 13:
                    UserMessages.Message(null, "لا يمكن دمج لانة مربوط بي فئة الاصول  ", string.Empty);
                    return;
                case 14:
                    UserMessages.Message(null, "لا يمكن دمج لانة مربوط بي  إعدادات نقطة البيع", string.Empty);
                    return;
                case 16:
                    UserMessages.Message(null, "لا يمكن دمج لانة مربوط بي  بنك", string.Empty);
                    return;
                case 15:
                    UserMessages.Message(null, "لا يمكن دمج لانة مربوط بي حساب ابن", string.Empty);
                    return;
            }
             
            UserMessages.Message(null, Resources.UserInfoMessages.OperationSuccess, string.Empty);
        }
        catch (Exception ex)
        {
            Logger.LogError(Resources.UserInfoMessages.OperationFailed, ex);
        }

    }
    protected void btnSearch_Click(object sender, EventArgs e)
    {
        this.FillCOATree(acAccountSearch.Text, acParentAccountSearch.Value.ToExpressString());
    }
    protected void btnClearSrch_Click(object sender, EventArgs e)
    {

    }
}